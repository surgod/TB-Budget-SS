class "Адрес получателя пособия";

import classes Константы,ФункцииПервичныхДокументов;
import Базовый classes Константы;

inclass public

  --@doc Конструктор: cоздание объекта по записи Заявления и Типу адреса
  func СоздатьПоЗаписиЗаявленияИТипу (локЗаявление: Документы.Первичные.Заявление; локТипАдресаСС : integer)  : Документы.АдресПолучателя;
    Result = inherited Create;
    Result.ПоляПоЗаписиИТипуАдреса(локЗаявление,локТипАдресаСС);
  end;

inobject public

func Заявление : Документы.Первичные.Заявление;
  return _Заявление;
end;

func ПолучательПособия : Базовый.Данные.Субъект;
  return _ПолучательПособия;
end;

func ТипАдресаСС : integer;
  return _ТипАдресаСС;
end;

func Адрес : Базовый.Справочники.Адрес;
  return _Адрес;
end;

func Индекс : string;
  --return _Индекс;
end;

func Регион : string;
  --return _Регион;
end;

func Район : string;
  --return _Район;
end;

func НасПункт : string;
  --return _НасПункт;
end;

func Улица : string;
  --return _Улица;
end;

func Дом : string;
  --return _Дом;
end;

func Корпус : string;
  --return _Корпус;
end;

func Строение : string;
  --return _Строение;
end;

func Квартира : string;
  --return _Квартира;
end;

proc ЗаполнитьПоУмолчанию;
  УдалитьЗаписьАдреса;
  if (_ТипАдресаСС = ТипАдресаРегистр) :
     _Адрес = АдресРегистрацииПоУмолчанию;
  fi;
end;

proc УдалитьЗаписьАдреса;
  if (_Адрес <> nil) :
    _Адрес.Delete;
  fi;
  _Адрес = nil;
end;

inobject private

_Заявление : Документы.Первичные.Заявление;
_ПолучательПособия : Базовый.Данные.Субъект;
_ТипАдресаСС : integer;
_Адрес : Базовый.Справочники.Адрес;

proc ПоляПоЗаписиИТипуАдреса (локЗаявление: Документы.Первичные.Заявление; локТипАдресаСС : integer);
  _Заявление = локЗаявление;
  _ПолучательПособия = локЗаявление.Субъект;
  _ТипАдресаСС = локТипАдресаСС;
  _Адрес = ЗаписьАдресаПоЗаявлению;
end;

func ЗаписьАдресаПоЗаявлению : Базовый.Справочники.Адрес;
  var aFlt: string[];
  var локФильтр : string;
  var i : integer;
    i = if(_ТипАдресаСС = ТипАдресаЖитель : тапФактический,тапПрописка);
    aFlt[1] = 'Заявление=' + Str(_Заявление);
    aFlt[2] = 'ИмяТипаАдреса="' + Предопределения[i,1] + '"';
    локФильтр = СИС2.СтроковыеФункции.СложитьСтрокиФильтраПоИ(aFlt);
    Result = СИС2.ФункцииДокумента.QueryRecord(Базовый.Справочники.Адрес, локФильтр);
end;

func АдресРегистрацииПоУмолчанию : Базовый.Справочники.Адрес ;
  var локАдрес,локАдрес_Персонал : Базовый.Справочники.Адрес;
  var локФизЛицо : Базовый.Данные.Субъект;
  var локНаДату : date;
  var локТипАдреса : Базовый.Справочники.ТипАдреса;
  var i : integer;
    Result = nil;
    локФизЛицо = _ПолучательПособия.ФизЛицо;
    локНаДату  = if(_Заявление.Дата <> nil: _Заявление.Дата, Today);
    локАдрес_Персонал = ТББ_Базовый.Библио.ПолучитьАдресСубъекта(локФизЛицо,локНаДату);
    if (локАдрес_Персонал <> nil) :
      локАдрес = локАдрес_Персонал.Clone;
      локТипАдреса = ТипАдреса_Прописка;
      локАдрес.Субъект = nil;
      локАдрес.Заявление = _Заявление;
      локАдрес.ПолучательПособия = _ПолучательПособия;
      локАдрес.Позиции.Clear;
      i = локАдрес.Позиции.Add;
      локАдрес.Позиции[i].ТипАдреса = локТипАдреса;
      локАдрес.ИмяТипаАдреса = Предопределения[тапПрописка,1];
      локАдрес.Post;
      return локАдрес;
    fi;
end;
func ТипАдреса_Прописка : Базовый.Справочники.ТипАдреса;
  var локФильтр : string;
    локФильтр = "Код='" + Предопределения[тапПрописка,1] +"'";
    Result = СИС2.ФункцииДокумента.QueryRecord(Базовый.Справочники.ТипАдреса, локФильтр);
end;


end