class "Удостоверение личности получателя пособия";

import classes Константы,ФункцииПервичныхДокументов;


inclass public

  --@doc Конструктор: cоздание объекта по записи Заявления
  func СоздатьПоЗаписиЗаявления (локЗаявление: Документы.Первичные.Заявление)  : Документы.УдостоверениеПолучателя;
    Result = inherited Create;
    Result.ПоляПоЗаявлению(локЗаявление);
  end;

inobject public

func Заявление : Документы.Первичные.Заявление;
  return _Заявление;
end;

func ПолучательПособия : Базовый.Данные.Субъект;
  return _ПолучательПособия;
end;

func ТипУдостоверения : integer;
  Result = ТипУдЛичнНет;
  if (_Документ <> nil) :
    return _Документ.ТипДокумента;
  fi;
end;

func Документ : Документы.Первичные.Получатель.Удостоверение;
  return _Документ;
end;

proc УдалитьЗаписьДокумента;
  if (_Документ <> nil) :
    _Документ.Delete;
  fi;
  _Документ = nil;
end;

proc ЗаполнитьПоУмолчанию;
  УдалитьЗаписьДокумента;
  _Документ = УдостоверениеЛичности_ПоУмолчанию;
end;

func УдостоверениеСтрокой : string;
  return  ДокументВСтроку;
end;



inobject private

_Заявление : Документы.Первичные.Заявление;
_ПолучательПособия : Базовый.Данные.Субъект;
_Документ : Документы.Первичные.Получатель.Удостоверение;


proc ПоляПоЗаявлению (локЗаявление: Документы.Первичные.Заявление);
  _Заявление = локЗаявление;
  _ПолучательПособия = локЗаявление.Субъект;
  _Документ = ЗаписьУдостоверенияПоЗаявлению;
end;

func ЗаписьУдостоверенияПоЗаявлению : Документы.Первичные.Получатель.Удостоверение;
  var локФильтр : string;
    локФильтр = 'Заявление=' + Str(_Заявление);
    Result = СИС2.ФункцииДокумента.QueryRecord(Документы.Первичные.Получатель.Удостоверение, локФильтр);
end;

func ДокументВСтроку : string;
  Result = '';
  if (_Документ <> nil) :
    Result = _Документ.Наим;
    Result = Result + if(_Документ.Серия <> '' : ',серия ' + _Документ.Серия, '');
    Result = Result + if(_Документ.Номер <> '' : ',номер ' + _Документ.Номер, '');
    Result = Result + if(_Документ.ДатаВыдачи <> nil  : ',дата выдачи ' + Str(_Документ.ДатаВыдачи), '');
    Result = Result + if(_Документ.КемВыдан <> ''  : ', ' + _Документ.КемВыдан, '');
    Result = Result + if(_Документ.ДатаОкончания <> nil  : ', действует до ' + Str(_Документ.ДатаОкончания), '');
  fi;
end;
func УдостоверениеЛичности_ПоУмолчанию : Документы.Первичные.Получатель.Удостоверение;
  var локФизЛицо : Базовый.Данные.Субъект;
  var локНаДату : date;
  var локДокументПерсонал : Базовый.Справочники.Удостоверение;
  var локДокумент : Документы.Первичные.Получатель.Удостоверение;
  var локИмяДокумента : string;
    Result = nil;
    локФизЛицо = _ПолучательПособия.ФизЛицо;
    локНаДату  = if(_Заявление.Дата <> nil: _Заявление.Дата, Today);
    локДокументПерсонал  = ТББ_Базовый.Библио.ПолучитьДокументСубъекта(локФизЛицо,локНаДату);
    if (локДокументПерсонал  <> nil) :
      локДокумент = Документы.Первичные.Получатель.Удостоверение.Create;
      локДокумент.Заявление = _Заявление;
      локДокумент.Субъект = _ПолучательПособия;
      локИмяДокумента = if(локДокументПерсонал.ВидДокумента <>nil : локДокументПерсонал.ВидДокумента.Имя, '');
      if (pos('ПАСПОРТ',локИмяДокумента) <> 0) :
         локДокумент.ТипДокумента = ТипУдЛичнПаспорт;
      elsif (pos('ВРЕМЕННОЕ УДОСТОВЕРЕНИЕ',локИмяДокумента) <> 0) :
         локДокумент.ТипДокумента = ТипУдЛичнВрем;
      else
         локДокумент.ТипДокумента = ТипУдЛичнИное;
      fi;
      локДокумент.Наим = локИмяДокумента;
      локДокумент.Серия = локДокументПерсонал.Серия;
      локДокумент.Номер = локДокументПерсонал.Номер;
      локДокумент.ДатаВыдачи = локДокументПерсонал.ДатаВыдачи;
      локДокумент.КемВыдан = локДокументПерсонал.Кем;
      локДокумент.ДатаОкончания = локДокументПерсонал.ДатаОкончания;
      локДокумент.Post;
      return локДокумент;
    fi;
end;


end