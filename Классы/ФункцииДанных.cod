class "‘ункции дл€ работы с данными";

import classes  онстанты;
import Ѕазовый classes  онстанты;

inclass public

proc јдрес–егистрацииѕо”мол (лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€; лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var локјдрес_‘Ћ,локјдрес—— : Ѕазовый.—правочники.јдрес;
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
  var лок«апись“ипјдреса  : Ѕазовый.—правочники.“ипјдреса;
  var i : integer;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    локјдрес_‘Ћ = “ЅЅ_Ѕазовый.Ѕиблио.ѕолучитьјдрес—убъекта(лок‘изЋицо,Today);
    if (локјдрес_‘Ћ <> nil) :
      локјдрес—— = локјдрес_‘Ћ.Clone;
      локјдрес——.—убъект = nil;
      локјдрес——.ѕолучатель‘изЋицо = лок‘изЋицо;
      локјдрес——.«а€вкаЌаЌазначениеѕособи€ = лок«а€вка;
      лок«апись“ипјдреса = «апись“ипјдреса (тапѕрописка);
      локјдрес——.ѕозиции.Clear;
      i = локјдрес——.ѕозиции.Add;
      локјдрес——.ѕозиции[i].“ипјдреса = лок«апись“ипјдреса;
      локјдрес——.Post;
    fi;
end;

func «апись“ипјдреса (лок“ипјдреса : integer): Ѕазовый.—правочники.“ипјдреса;
  var aTxt: string[];
  var лок‘ильтр : string;
    aTxt[1] = " од='" + ѕредопределени€[лок“ипјдреса,1] +"'";
    aTxt[2] = "ƒл€‘излиц";
    лок‘ильтр = —»—2.—троковые‘ункции.—ложить—троки‘ильтраѕо»(aTxt);
    Result = —»—2.‘ункцииƒокумента.QueryRecord(Ѕазовый.—правочники.“ипјдреса, лок‘ильтр);
end;

proc ”дЋичностиѕо”мол (лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€; лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var лок”достоверение‘Ћ,лок”достоверение—— : Ѕазовый.—правочники.”достоверение;
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    лок”достоверение‘Ћ = “ЅЅ_Ѕазовый.Ѕиблио.ѕолучитьƒокумент—убъекта(лок‘изЋицо,Today);
    if (лок”достоверение‘Ћ <> nil) :
      лок”достоверение—— = лок”достоверение‘Ћ.Clone;
      лок”достоверение——.‘изЋицо = nil;
      лок”достоверение——.ѕолучатель‘изЋицо = лок‘изЋицо;
      лок”достоверение——.«а€вкаЌаЌазначениеѕособи€ = лок«а€вка;
      лок”достоверение——.“ипƒокумента—оц—трах = “ипƒокѕолуч”дЋичн;
      лок”достоверение——.Post;
    fi;
end;

func јдрес–егистрацииѕо«а€вке(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€) : Ѕазовый.—правочники.јдрес;
  Result = nil;
  if (лок«а€вка <> nil) :
    return јдресѕо«а€вке»“ипу(лок«а€вка,тапѕрописка);
  fi;
end;
func јдресѕроживани€ѕо«а€вке(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€) : Ѕазовый.—правочники.јдрес;
  Result = nil;
  if (лок«а€вка <> nil) :
    return јдресѕо«а€вке»“ипу(лок«а€вка,тап‘актический);
  fi;
end;
func јдресѕо«а€вке»“ипу(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€; лок“ипјдреса : integer) : Ѕазовый.—правочники.јдрес;
  Result = nil;
  with Query.Create([ƒанные.ѕолучательѕособи€]) do
    Filter = '«а€вкаЌаЌазначениеѕособи€ = ' + Str(лок«а€вка);
    Select;
    while not EOF do
      if (Current.ѕозиции[1].“ипјдреса = «апись“ипјдреса(лок“ипјдреса)) :
        Result = Current;
        break;
      fi;
      Next;
    end;
  end;
end;

func ”дЋичностиѕо«а€вке(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€) : Ѕазовый.—правочники.”достоверение;
  var лок‘ильтр : string;
  var aTxt: string[];
    aTxt[1] = '«а€вкаЌаЌазначениеѕособи€ = ' + Str(лок«а€вка);
    aTxt[2] = '“ипƒокумента—оц—трах' + Str(“ипƒокѕолуч”дЋичн);
    лок‘ильтр = —»—2.—троковые‘ункции.—ложить—троки‘ильтраѕо»(aTxt);
    Result = —»—2.‘ункцииƒокумента.QueryRecord(Ѕазовый.—правочники.”достоверение, лок‘ильтр);
end;

func ƒокумќѕрживанииѕо«а€вке(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€) : Ѕазовый.—правочники.”достоверение;
  var лок‘ильтр : string;
  var aTxt: string[];
    aTxt[1] = '«а€вкаЌаЌазначениеѕособи€ = ' + Str(лок«а€вка);
    aTxt[2] = '“ипƒокумента—оц—трах' + Str(“ипƒокѕолучѕрожив);
    лок‘ильтр = —»—2.—троковые‘ункции.—ложить—троки‘ильтраѕо»(aTxt);
    Result = —»—2.‘ункцииƒокумента.QueryRecord(Ѕазовый.—правочники.”достоверение, лок‘ильтр);
end;

func јдрес—трокойѕо«аписи(локјдрес : Ѕазовый.—правочники.јдрес) : string;
  Result = '';
  if (локјдрес <> nil) :
    if (локјдрес.јдрес_—трокой = '') :
      return Ѕазовый.—правочники.интјдрес.јдрес_ќбщий(локјдрес);
    fi;
  fi;
end;

end