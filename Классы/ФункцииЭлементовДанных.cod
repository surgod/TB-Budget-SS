class "‘ункции работы с запис€ми элементов данных";

import classes  онстанты;
import Ѕазовый classes  онстанты;


inclass public

--@doc возвращает ссылку на запись последнего дл€ данного страхового случа€ получател€
func ѕолучательƒл€—трах—луча€ (лок—трах—лучай : ƒанные.—траховой—лучай) : ƒанные.ѕолучательѕособи€;
  Result = nil;
  with Query.Create([ƒанные.ѕолучательѕособи€]) do
    Filter = '—траховой—лучай = ' + Str(лок—трах—лучай);
    Order = '—четчик';
    Select;
    if (not EOF) :
      Last;
      Result = Current;
    fi;
  end;
end;

--@doc возвращает ссылку на запись адреса получател€ по типу адреса
func јдресѕолучател€ѕо“ипу (локѕолучательѕособи€ : ƒанные.ѕолучательѕособи€; лок“ипјдреса : integer) : Ѕазовый.—правочники.јдрес;
  var aFlt: string[];
    Result = nil;
    aFlt[1] = 'ѕолучательѕособи€=' + Str(локѕолучательѕособи€);
    if (лок“ипјдреса = тапѕрописка) :
      aFlt[2] = 'Ётојдрес–егистрации';
    else
      aFlt[2] = 'Ётојдресѕроживани€';
    fi;
    with Query.Create([Ѕазовый.—правочники.јдрес]) do
      Filter = —»—2.—троковые‘ункции.—ложить—троки‘ильтраѕо»(aFlt);
      Select;
      if (not EOF) :
        Result = Current;
      fi;
    end;
end;

proc “ест(локЅанк–екв : ƒанные.Ѕанк–еквизиты);
  var локЅанк1 : ƒанные.Ѕанк1;
      локЅанк1 = локЅанк–екв.Clone as ƒанные.Ѕанк–еквизиты;
end;

--@doc возвращает ссылку на запись адреса получател€ по типу адреса
func јдрес——ѕолучател€ѕо“ипу (локѕолучательѕособи€ : ƒанные.ѕолучательѕособи€; лок“ипјдреса : integer) : —правочники.јдрес—оц—трах;
  var лок«апись“ипјдреса  : Ѕазовый.—правочники.“ипјдреса;
  var i : integer;
    Result = nil;
    лок«апись“ипјдреса = «апись“ипјдреса (лок“ипјдреса);
    with Query.Create([—правочники.јдрес—оц—трах]) do
      Filter = 'ѕолучательѕособи€=' + Str(локѕолучательѕособи€);
      Select;
      while not EOF do
        for i = 1.. Current.ѕозиции.Count do
          if (Current.ѕозиции[i].“ипјдреса = лок«апись“ипјдреса) :
            return Current;
          fi;
        end;
        Next;
      end;
    end;
end;

func «апись“ипјдреса (лок“ипјдреса : integer): Ѕазовый.—правочники.“ипјдреса;
  var лок‘ильтр : string;
    лок‘ильтр = " од='" + ѕредопределени€[лок“ипјдреса,1] +"'";
    Result = —»—2.‘ункцииƒокумента.QueryRecord(Ѕазовый.—правочники.“ипјдреса, лок‘ильтр);
end;

proc јдрес–егистрацииѕо”мол (локѕолучательѕособи€ : ƒанные.ѕолучательѕособи€);
  var локјдрес : Ѕазовый.—правочники.јдрес;
  var локјдрес—— : —правочники.јдрес—оц—трах;
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
  var лок«апись“ипјдреса  : Ѕазовый.—правочники.“ипјдреса;
  var i : integer;
    лок‘изЋицо = локѕолучательѕособи€.—убъект.‘изЋицо;
    локјдрес = “ЅЅ_Ѕазовый.Ѕиблио.ѕолучитьјдрес—убъекта(лок‘изЋицо,Today);
    if (локјдрес <> nil) :
      локјдрес—— = локјдрес.Clone as —правочники.јдрес—оц—трах;
      локјдрес——.ѕолучательѕособи€ = локѕолучательѕособи€;
      лок«апись“ипјдреса = «апись“ипјдреса (тапѕрописка);
      локјдрес——.ѕозиции.Clear;
      i = локјдрес——.ѕозиции.Add;
      локјдрес——.ѕозиции[i].“ипјдреса = лок«апись“ипјдреса;
      локјдрес——.Post;
    fi;

end;


end