class inherited ћашина–еквизитов.Ѕазовые.инт«апись од»м€ "»нтерфейс за€вки на назначение пособий";

import classes  онстанты,‘ункцииѕрименени€ остант,‘ункцииƒанных;
import Ѕюджет_«ѕиƒƒ classes  онстанты;
import Ѕазовый classes  онстанты;
import —»—2 classes  онстанты;


inclass public

  func —в€занный ласс«аписей: class —»—2.Ѕазова€.Ѕазова€«апись;
    Result = ƒанные.«а€вкаЌаЌазначениеѕособи€;
  end;

  func Create: ƒанные.инт«а€вкаЌаЌазначениеѕособи€;
    Result = inherited Create;
    Result.Record = ƒанные.«а€вкаЌаЌазначениеѕособи€.Create;
  end;

  func ќткрытьѕо«аписи synonym OpenRecord (locRecord: ƒанные.«а€вкаЌаЌазначениеѕособи€): ƒанные.инт«а€вкаЌаЌазначениеѕособи€;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func Ѕланк–едакторѕо”молчанию: class BlankForm;
    Result = ƒанные.ред«а€вкаЌаЌазначениеѕособи€;
  end;

  func  артотекаѕо”молчанию: class CardForm;
    Result = nil; --ƒанные.картЅанк–еквизиты;
  end;

inobject public

  Record: ƒанные.«а€вкаЌаЌазначениеѕособи€;

  --@doc ѕри создании новой записи
proc »нициализироватьѕо”молчанию synonym InitByDefault;
  inherited InitByDefault;
  Self.Record. од = “ЅЅ_Ѕазовый.Ќумератор.Ќовый од(Self.Record);
end;


proc Ќова€«а€вка(локЌазначение : Ѕюджет_«ѕиƒƒ.–асчетныеќперации.Ќазначениеѕособи€);
  »нициализироватьѕо”молчанию;
  if (локЌазначение = nil) :
    return;
  fi;
  Self.Record.Ќаше”чреждение = локЌазначение.Ќаше”чреждение;
  Self.Record.—отрудник = локЌазначение.—отрудник;
  Self.Record.Ќазначениеѕособи€ = локЌазначение;
  «аписать—ведќѕолучателе(локЌазначение.—отрудник);
  Self.Record.“ипѕособи€ = локЌазначение.¬ид—траховогоќбеспечени€.“ипѕособи€;
  Self.Record.“ип–еестра = “ип–еестраѕо“ипуѕособи€(Self.Record.“ипѕособи€);
  Self.Record.—пособ¬ыплаты = “ип¬ыплата‘Ћ_Ѕанк;
  if (локЌазначение.ƒатаѕере–асчета <> nil) :
    Self.Record.“ип»нфо = “ип»нфоѕервична€;
  else
    Self.Record.“ип»нфо = “ип»нфоѕервична€;
  fi;
  if (локЌазначение.“ипƒокќсновани€ =ƒокументќснованиеѕособи€_ѕрочее) :
    if (локЌазначение.ƒатаЌачала <> nil and локЌазначение.ƒатаќкончани€ <> nil) :
      Self.Record.“ипƒокќсновани€ = “ип√рƒок_«а€вление;
    else
      Self.Record.“ипƒокќсновани€ = “ип√рƒок_—правка;
    fi;
  else
    Self.Record.“ипƒокќсновани€ = “ип√рƒок_ЅЋ;
  fi;
  Self.Record.Post;
  —правочники.интјдрес—оц—трах.јдрес–егистрацииѕо”мол(Self.Record);
  --—правочники.инт”достоверение—оц—трах.”дЋичностиѕо”мол(Self.Record,Self.Record.—отрудник);
  if (локЌазначение.ЅольничныйЋист <> nil) :
     опироватьЅольничныйЋист(локЌазначение.ЅольничныйЋист);
  fi;
end;


inobject private

proc «аписать—ведќѕолучателе(лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    Self.Record.‘амили€ѕолучател€ = Ѕазовый.‘ункции—убъекта.‘амили€_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    Self.Record.»м€ѕолучател€  = Ѕазовый.‘ункции—убъекта.»м€_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    Self.Record.ќтчествоѕолучател€ = Ѕазовый.‘ункции—убъекта.ќтчество_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    Self.Record.ƒата–ождени€ = лок‘изЋицо.ƒата–ождени€;
    Self.Record.“елефон = лок‘изЋицо.“елефон;
end;

proc «аписать»нформациюƒл€–асчета(локЌазначение : Ѕюджет_«ѕиƒƒ.–асчетныеќперации.Ќазначениеѕособи€);
  var i,j : integer;
  var лок»нт : Ѕюджет_«ѕиƒƒ.–абочие.инт–асчет—з——;
  var лок–асчет—з—— : Ѕюджет_«ѕиƒƒ.–асчетныеќперации.—редний«аработок——;
    лок»нт = Ѕюджет_«ѕиƒƒ.–абочие.инт–асчет—з——.Ќайтиѕо«аписиЌазначени€ѕособи€(локЌазначение);
    лок–асчет—з—— = лок»нт.Record;
    if (лок–асчет—з—— <> nil) :
      for i = 1..лок–асчет—з——.√од–асчета.Count do
        j = Self.Record.√од–асчета.Add;
        Self.Record.√од–асчета[j].”четный√од = лок–асчет—з——.√од–асчета[i].”четный√од;
        Self.Record.√од–асчета[j].—умма¬–асчете = лок–асчет—з——.√од–асчета[i].—умма¬–асчете;
        Self.Record.√од–асчета[j]. ƒ¬–асчете = лок–асчет—з——.√од–асчета[i]. ƒ орр;
      end;
    fi;
end;

proc «аписатьЅанк–еквизиты(лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
  var локЅанк‘Ћ : Ѕазовый.—правочники.Ѕанковские–еквизиты;
  var лок»нт‘Ћ : Ѕазовый.ƒанные.инт—убъект;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    лок»нт‘Ћ = Ѕазовый.ƒанные.инт—убъект.ќткрытьѕо«аписи(лок‘изЋицо);
    локЅанк‘Ћ = лок»нт‘Ћ.ѕолучить–асчетный—чет—отрудника(nil);
    if (локЅанк‘Ћ <> nil) :
      Self.Record.ЅанкЌаим = локЅанк‘Ћ.ЌаимЅанка;
      Self.Record.—четѕолучател€ = локЅанк‘Ћ.–—чет;
      Self.Record.Ѕ»  = локЅанк‘Ћ.Ѕ» ;
      Self.Record.Ќомер арты = локЅанк‘Ћ.ЌомерЅанк арты;
    fi;
end;

proc  опироватьЅольничныйЋист(локЅольничныйЋист : Ѕюджет_ѕерсонал.ƒокументы. адры.ЅольничныйЋист);
  var лок»нт : ƒокументы. адры.интЅольничныйЋист——;
     лок»нт = ƒокументы. адры.интЅольничныйЋист——.Create;
     лок»нт.ЌовыйЅольничныйЋист——(локЅольничныйЋист,Self.Record);
end;



end