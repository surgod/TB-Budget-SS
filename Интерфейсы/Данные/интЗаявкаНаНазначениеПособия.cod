class inherited ћашина–еквизитов.Ѕазовые.инт«апись "»нтерфейс за€вки на назначение пособий";

import classes  онстанты,‘ункцииѕрименени€ остант;--,‘ункцииƒанных;
import Ѕюджет_«ѕиƒƒ classes  онстанты;
import Ѕазовый classes  онстанты;
import —»—2 classes  онстанты;


inclass public

  func —в€занный ласс«аписей: class —»—2.Ѕазова€.Ѕазова€«апись;
    Result = ƒанные.«а€вкаЌаЌазначениеѕособи€;
  end;

  func Create: ƒанные.инт«а€вкаЌаЌазначениеѕособи€;
    Result = inherited Create;
    Result.Record = ƒанные.«а€вкаЌаЌазначениеѕособи€.Create;
  end;

  func ќткрытьѕо«аписи synonym OpenRecord (locRecord: ƒанные.«а€вкаЌаЌазначениеѕособи€): ƒанные.инт«а€вкаЌаЌазначениеѕособи€;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func Ѕланк–едакторѕо”молчанию: class BlankForm;
    Result = ƒанные.ред«а€вкаЌаЌазначениеѕособи€;
  end;

  func  артотекаѕо”молчанию: class CardForm;
    Result = nil; --ƒанные.картЅанк–еквизиты;
  end;

inobject public

  Record: ƒанные.«а€вкаЌаЌазначениеѕособи€;


  --@doc ѕри создании новой записи
proc »нициализироватьѕо”молчанию synonym InitByDefault;
  inherited InitByDefault;
end;


proc Ќова€«а€вка(локЌазначение : Ѕюджет_«ѕиƒƒ.–асчетныеќперации.Ќазначениеѕособи€);
  »нициализироватьѕо”молчанию;
  if (локЌазначение = nil) :
    return;
  fi;
  Self.Record.Ќаше”чреждение = локЌазначение.Ќаше”чреждение;
  Self.Record.—отрудник = локЌазначение.—отрудник;
  Self.Record.Ќазначениеѕособи€ = локЌазначение;
  «аписать—ведќѕолучателе(локЌазначение.—отрудник);
  Self.Record.“ипѕособи€ = локЌазначение.¬ид—траховогоќбеспечени€.“ипѕособи€;
  Self.Record.“ип–еестра = “ип–еестраѕо“ипуѕособи€(Self.Record.“ипѕособи€);
  Self.Record.—пособ¬ыплаты = “ип¬ыплата‘Ћ_Ѕанк;
  «аписатьЅанк–еквизиты(локЌазначение.—отрудник);
  Self.Record.Post;
  —правочники.интјдрес—оц—трах.јдрес–егистрацииѕо”мол(Self.Record);
  —правочники.инт”достоверение—оц—трах.”дЋичностиѕо”мол(Self.Record);
  if (локЌазначение.ЅольничныйЋист <> nil) :
    —оздатьƒанныеƒл€ѕособи€ѕоЅЋ;
  else
    if (Self.Record.“ипѕособи€ = “ипѕособи€–ан—рок) :
      —оздатьƒанныеƒл€ѕособи€–анние—рокиЅерем;
    fi;
  fi;
  if (Self.Record.“ипѕособи€ in [“ипѕособи€ЅЋ,“ипѕособи€Ѕерем,“ипѕособи€”ход–еб,“ипѕособи€“равма]) :
    —оздать–асчетѕособи€;
  fi;
end;

func Ќайтиѕозицию–еестра : ƒокументы.‘——.ѕозици€–еестра;
  var лок‘ильтр : string;
    Result = nil;
    лок‘ильтр = '—ведени€='+Str(Self.Record);
    Result = —»—2.‘ункцииƒокумента.QueryRecord(ƒокументы.‘——.ѕозици€–еестра, лок‘ильтр);
end;





inobject private

proc «аписать—ведќѕолучателе(лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    Self.Record.‘амили€ѕолучател€ = Ѕазовый.‘ункции—убъекта.‘амили€_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    Self.Record.»м€ѕолучател€  = Ѕазовый.‘ункции—убъекта.»м€_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    Self.Record.ќтчествоѕолучател€ = Ѕазовый.‘ункции—убъекта.ќтчество_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    Self.Record.ƒата–ождени€ = лок‘изЋицо.ƒата–ождени€;
    Self.Record.“елефон = лок‘изЋицо.“елефон;
end;

proc «аписатьЅанк–еквизиты(лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
  var локЅанк‘Ћ : Ѕазовый.—правочники.Ѕанковские–еквизиты;
  var лок»нт‘Ћ : Ѕазовый.ƒанные.инт—убъект;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    лок»нт‘Ћ = Ѕазовый.ƒанные.инт—убъект.ќткрытьѕо«аписи(лок‘изЋицо);
    локЅанк‘Ћ = лок»нт‘Ћ.ѕолучить–асчетный—чет—отрудника(nil);
    if (локЅанк‘Ћ <> nil) :
      Self.Record.ЅанкЌаим = локЅанк‘Ћ.ЌаимЅанка;
      Self.Record.—четѕолучател€ = локЅанк‘Ћ.–—чет;
      Self.Record.Ѕ»  = локЅанк‘Ћ.Ѕ» ;
      Self.Record.Ќомер арты = локЅанк‘Ћ.ЌомерЅанк арты;
    fi;
end;



proc —оздатьƒанныеƒл€ѕособи€ѕоЅЋ;
  var лок»нтƒанные : ƒанные.инт—ведени€–еестраЅЋ;
    лок»нтƒанные = ƒанные.инт—ведени€–еестраЅЋ.Create;
    лок»нтƒанные.Ќова€«аписьѕо«а€вке(Self.Record);
    лок»нтƒанные. опировать»зЅольничногоЋиста(Self.Record.Ќазначениеѕособи€.ЅольничныйЋист);
    лок»нтƒанные.Record.Post;
end;

proc —оздать–асчетѕособи€;
  var лок»нт–асчет : ƒанные.инт–асчет–еестраЅЋ;
    лок»нт–асчет = ƒанные.инт–асчет–еестраЅЋ.Create;
    лок»нт–асчет.Ќова€«аписьѕо«а€вке(Self.Record);
    if (Self.Record.Ќазначениеѕособи€.ЅольничныйЋист <> nil) :
      лок»нт–асчет. опировать»зЅольничногоЋиста(Self.Record.Ќазначениеѕособи€.ЅольничныйЋист);
    fi;
    лок»нт–асчет.Record.Post;
end;

proc —оздатьƒанныеƒл€ѕособи€–анние—рокиЅерем;
  var лок»нтƒанные : ƒанные.инт—ведени€–еестраЅЋ;
    лок»нтƒанные = ƒанные.инт—ведени€–еестраЅЋ.Create;
    лок»нтƒанные.Ќова€«аписьѕо«а€вке(Self.Record);
    лок»нтƒанные.«аписать—правкуќ–анних—роках(Self.Record.Ќазначениеѕособи€);
    лок»нтƒанные.Record.Post;
end;



end