class inherited ћашина–еквизитов.Ѕазовые.инт«апись "»нтерфейс за€вки на назначение пособий";

import classes  онстанты,‘ункцииѕрименени€ остант;--,‘ункцииƒанных;
import Ѕюджет_«ѕиƒƒ classes  онстанты;
import Ѕазовый classes  онстанты;
import —»—2 classes  онстанты,‘ункции–““»,‘ункцииƒокумента;

inclass public

  proc »нициализировать»нтерфейс synonym InitInterface;
    var локћетод : MethodInfo;
    var локѕолн»м€ : string;
      inherited InitInterface;
      локѕолн»м€ = "Ѕюджет_—оц—трах.ƒанные.инт«а€вкаЌаЌазначениеѕособи€.”далитьјдреса«а€вки";
      локћетод = ѕолучить»нфоћетодаѕоѕолному»менићетода(локѕолн»м€);
      —обытиеѕеред”далением.AddMethod(локћетод);
      локѕолн»м€ = "Ѕюджет_—оц—трах.ƒанные.инт«а€вкаЌаЌазначениеѕособи€.”далить”достоверени€«а€вки";
      локћетод = ѕолучить»нфоћетодаѕоѕолному»менићетода(локѕолн»м€);
      —обытиеѕеред”далением.AddMethod(локћетод);
      локѕолн»м€ = "Ѕюджет_—оц—трах.ƒанные.инт«а€вкаЌаЌазначениеѕособи€.”далить—ведени€–еестраЅЋ«а€вки";
      локћетод = ѕолучить»нфоћетодаѕоѕолному»менићетода(локѕолн»м€);
      —обытиеѕеред”далением.AddMethod(локћетод);
      локѕолн»м€ = "Ѕюджет_—оц—трах.ƒанные.инт«а€вкаЌаЌазначениеѕособи€.”далить–асчеты–еестраЅЋ«а€вки";
      локћетод = ѕолучить»нфоћетодаѕоѕолному»менићетода(локѕолн»м€);
      —обытиеѕеред”далением.AddMethod(локћетод);
  end;


  func —в€занный ласс«аписей: class —»—2.Ѕазова€.Ѕазова€«апись;
    Result = ƒанные.«а€вкаЌаЌазначениеѕособи€;
  end;

  func Create: ƒанные.инт«а€вкаЌаЌазначениеѕособи€;
    Result = inherited Create;
    Result.Record = ƒанные.«а€вкаЌаЌазначениеѕособи€.Create;
  end;

  func ќткрытьѕо«аписи synonym OpenRecord (locRecord: ƒанные.«а€вкаЌаЌазначениеѕособи€): ƒанные.инт«а€вкаЌаЌазначениеѕособи€;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func Ѕланк–едакторѕо”молчанию: class BlankForm;
    Result = ƒанные.ред«а€вкаЌаЌазначениеѕособи€;
  end;

  func  артотекаѕо”молчанию: class CardForm;
    Result = ƒанные.карт«а€вкаЌаЌазначениеѕособи€;
  end;

func ”далитьјдреса«а€вки(локѕарам[] : variant) : logical;
  var Q: Query;
  var лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€;
    лок«а€вка = локѕарам[2];
    if лок«а€вка = nil then
      return false;
    end;
    Result = nil;
    Q = Query.Create([Ѕазовый.—правочники.јдрес]);
    Q.Filter = "«а€вкаЌаЌазначениеѕособи€="+Str(лок«а€вка);
    Q.Select;
    —»—2.‘ункцииƒокумента.DeleteAllRecords(Q);
end;

func ”далить”достоверени€«а€вки(локѕарам[] : variant) : logical;
  var Q: Query;
  var лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€;
    лок«а€вка = локѕарам[2];
    if лок«а€вка = nil then
      return false;
    end;
    Result = nil;
    Q = Query.Create([Ѕазовый.—правочники.”достоверение]);
    Q.Filter = "«а€вкаЌаЌазначениеѕособи€="+Str(лок«а€вка);
    Q.Select;
    —»—2.‘ункцииƒокумента.DeleteAllRecords(Q);
end;

func ”далить—ведени€–еестраЅЋ«а€вки(локѕарам[] : variant) : logical;
  var Q: Query;
  var лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€;
    лок«а€вка = локѕарам[2];
    if лок«а€вка = nil then
      return false;
    end;
    Result = nil;
    Q = Query.Create([ƒанные.—ведени€–еестраЅЋ]);
    Q.Filter = "«а€вкаЌаЌазначениеѕособи€="+Str(лок«а€вка);
    Q.Select;
    —»—2.‘ункцииƒокумента.DeleteAllRecords(Q);
end;

func ”далить–асчеты–еестраЅЋ«а€вки(локѕарам[] : variant) : logical;
  var Q: Query;
  var лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€;
    лок«а€вка = локѕарам[2];
    if лок«а€вка = nil then
      return false;
    end;
    Result = nil;
    Q = Query.Create([ƒанные.–асчет–еестраЅЋ]);
    Q.Filter = "«а€вкаЌаЌазначениеѕособи€="+Str(лок«а€вка);
    Q.Select;
    —»—2.‘ункцииƒокумента.DeleteAllRecords(Q);
end;

func ѕараметрыЌовой«а€вки(локЌазначениеѕособи€ : Ѕюджет_«ѕиƒƒ.–асчетныеќперации.Ќазначениеѕособи€;
                          локЌазначениеѕособи€ƒоп : Ѕюджет_«ѕиƒƒ.–асчетныеќперации.Ќазначениеѕособи€) : variant[2];
  var ii,jj : integer;
  var локЌаше”чреждение,лок—отрудник :  Ѕазовый.ƒанные.—убъект;
    Result = nil;
    if (локЌазначениеѕособи€ = nil) :
      return Result;
    fi;
    локЌаше”чреждение = локЌазначениеѕособи€.Ќаше”чреждение;
    лок—отрудник = локЌазначениеѕособи€.—отрудник;
    InsertInArray(Result, LengthOfArray(Result) + 1, ['Ќаше”чреждение', локЌаше”чреждение]);
    InsertInArray(Result, LengthOfArray(Result) + 1, ['—отрудник', лок—отрудник]);
    InsertInArray(Result, LengthOfArray(Result) + 1, ['Ќазначениеѕособи€', локЌазначениеѕособи€]);
    —ведени€ќѕолучателе¬ѕараметры(Result, лок—отрудник);
    ii = “ипѕособи€ѕо оду—ќ (локЌазначениеѕособи€.¬ид—траховогоќбеспечени€. од);
    --ii = локЌазначениеѕособи€.¬ид—траховогоќбеспечени€.“ипѕособи€;
    InsertInArray(Result, LengthOfArray(Result) + 1, ['“ипѕособи€', ii]);
    jj = “ип–еестраѕо“ипуѕособи€(ii);
    InsertInArray(Result, LengthOfArray(Result) + 1, ['“ип–еестра', jj]);
    InsertInArray(Result, LengthOfArray(Result) + 1, ['Ќазначениеѕособи€ƒоп', локЌазначениеѕособи€ƒоп]);
    if (локЌазначениеѕособи€ƒоп <> nil) :
      ii = “ипѕособи€ѕо оду—ќ (локЌазначениеѕособи€ƒоп.¬ид—траховогоќбеспечени€. од);
    else
      ii = “ипѕособи€Ќет;
    fi;
      --ii = локЌазначениеѕособи€ƒоп.¬ид—траховогоќбеспечени€.“ипѕособи€;
    InsertInArray(Result, LengthOfArray(Result) + 1, ['“ипѕособи€ƒоп', ii]);
    InsertInArray(Result, LengthOfArray(Result) + 1, ['—пособ¬ыплаты', “ип¬ыплата‘Ћ_Ѕанк]);
    —ведени€ќЅанк–еквизитвх¬ѕараметры(Result, лок—отрудник);
end;

func «а€вкаƒл€Ќазначени€ѕособи€ (локЌазначениеѕособи€ : Ѕюджет_«ѕиƒƒ.–асчетныеќперации.Ќазначениеѕособи€): ƒанные.«а€вкаЌаЌазначениеѕособи€;
  var лок‘ильтр : string;
    Result = nil;
    лок‘ильтр = 'Ќазначениеѕособи€=' + Str(локЌазначениеѕособи€) +
                ' or Ќазначениеѕособи€ƒоп=' + Str(локЌазначениеѕособи€);
    Result = —»—2.‘ункцииƒокумента.QueryRecord(ƒанные.«а€вкаЌаЌазначениеѕособи€, лок‘ильтр);
end;

inclass private

proc —ведени€ќѕолучателе¬ѕараметры(var локѕараметры[2] : variant ; лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var ss : string;
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    ss = Ѕазовый.‘ункции—убъекта.‘амили€_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    InsertInArray(локѕараметры, LengthOfArray(локѕараметры) + 1, ['‘амили€ѕолучател€', ss]);
    ss = Ѕазовый.‘ункции—убъекта.»м€_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    InsertInArray(локѕараметры, LengthOfArray(локѕараметры) + 1, ['»м€ѕолучател€', ss]);
    ss = Ѕазовый.‘ункции—убъекта.ќтчество_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    InsertInArray(локѕараметры, LengthOfArray(локѕараметры) + 1, ['ќтчествоѕолучател€', ss]);
    InsertInArray(локѕараметры, LengthOfArray(локѕараметры) + 1, ['ƒата–ождени€', лок‘изЋицо.ƒата–ождени€]);
    InsertInArray(локѕараметры, LengthOfArray(локѕараметры) + 1, ['“елефон', лок‘изЋицо.“елефон]);
end;

proc —ведени€ќЅанк–еквизитвх¬ѕараметры(var локѕараметры[2] : variant ;лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
  var локЅанк‘Ћ : Ѕазовый.—правочники.Ѕанковские–еквизиты;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    --лок»нт‘Ћ = ƒанные.инт—убъект.ќткрытьѕо«аписи(лок‘изЋицо);
    локЅанк‘Ћ = Ѕанк–еквизиты‘изЋица (лок‘изЋицо);
    if (локЅанк‘Ћ <> nil) :
      InsertInArray(локѕараметры, LengthOfArray(локѕараметры) + 1, ['ЅанкЌаим', локЅанк‘Ћ.ЌаимЅанка]);
      InsertInArray(локѕараметры, LengthOfArray(локѕараметры) + 1, ['—четѕолучател€', локЅанк‘Ћ.–—чет]);
      InsertInArray(локѕараметры, LengthOfArray(локѕараметры) + 1, ['Ѕ» ', локЅанк‘Ћ.Ѕ» ]);
      InsertInArray(локѕараметры, LengthOfArray(локѕараметры) + 1, ['Ќомер арты', локЅанк‘Ћ.ЌомерЅанк арты]);
    fi;
end;


func Ѕанк–еквизиты‘изЋица (лок‘изЋицо : Ѕазовый.ƒанные.—убъект ) : Ѕазовый.—правочники.Ѕанковские–еквизиты;
  var aFlt: string[];
    Result = nil;
    aFlt[1] = '—убъект=' + Str(лок‘изЋицо);
    aFlt[2] = 'not «авершен';
    aFlt[3] = 'not Ќеƒействительный';
    aFlt[4] = '((not «а€вкаЌаќткрытие) or («а€вкаЌаќткрытие and «акрытьјнкету))';
    aFlt[5] = '(ЌомерЅанк арты<>nil or –—чет<>nil)';
    with Query.Create([Ѕазовый.—правочники.Ѕанковские–еквизиты]) do
      Filter = —»—2.—троковые‘ункции.—ложить—троки‘ильтраѕо»(aFlt);
      if RecordsExists:
        Select;
        Last;
        Return Current;
      fi;
    end;
end;


inobject public

  Record: ƒанные.«а€вкаЌаЌазначениеѕособи€;


func Ќайтиѕозицию–еестра : ƒокументы.‘——.ѕозици€–еестра;
  var лок‘ильтр : string;
    Result = nil;
    лок‘ильтр = '—ведени€='+Str(Self.Record);
    Result = —»—2.‘ункцииƒокумента.QueryRecord(ƒокументы.‘——.ѕозици€–еестра, лок‘ильтр);
end;

proc —оздать—в€занные«аписи;
  —правочники.интјдрес—оц—трах.јдрес–егистрацииѕо”мол(Self.Record);
  —правочники.инт”достоверение—оц—трах.”дЋичностиѕо”мол(Self.Record);
  if (Self.Record.“ип–еестра = “ип–еестраЌѕ_ЅЋ) :
    ƒанные.инт—ведени€–еестраЅЋ.—оздать«аписьѕо«а€вке(Self.Record);
    if (Self.Record.“ипѕособи€ <> “ипѕособи€–ан—рок) :
      ƒанные.инт–асчет–еестраЅЋ.—оздать«аписьѕо«а€вке(Self.Record);
    fi;
  fi;
end;



inobject private

proc «аписать—ведќѕолучателе(лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    Self.Record.‘амили€ѕолучател€ = Ѕазовый.‘ункции—убъекта.‘амили€_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    Self.Record.»м€ѕолучател€  = Ѕазовый.‘ункции—убъекта.»м€_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    Self.Record.ќтчествоѕолучател€ = Ѕазовый.‘ункции—убъекта.ќтчество_Ќаƒату(лок‘изЋицо,Today,фс»менительный≈дин);
    Self.Record.ƒата–ождени€ = лок‘изЋицо.ƒата–ождени€;
    Self.Record.“елефон = лок‘изЋицо.“елефон;
end;

proc «аписатьЅанк–еквизиты(лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
  var локЅанк‘Ћ : Ѕазовый.—правочники.Ѕанковские–еквизиты;
  var лок»нт‘Ћ : Ѕазовый.ƒанные.инт—убъект;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    лок»нт‘Ћ = Ѕазовый.ƒанные.инт—убъект.ќткрытьѕо«аписи(лок‘изЋицо);
    локЅанк‘Ћ = лок»нт‘Ћ.ѕолучить–асчетный—чет—отрудника(nil);
    if (локЅанк‘Ћ <> nil) :
      Self.Record.ЅанкЌаим = локЅанк‘Ћ.ЌаимЅанка;
      Self.Record.—четѕолучател€ = локЅанк‘Ћ.–—чет;
      Self.Record.Ѕ»  = локЅанк‘Ћ.Ѕ» ;
      Self.Record.Ќомер арты = локЅанк‘Ћ.ЌомерЅанк арты;
    fi;
end;

proc —оздатьјдресѕолучател€ѕо”мол(лок—отрудник : Ѕазовый.ƒанные.—убъект);
  var локјдрес_‘Ћ : Ѕазовый.—правочники.јдрес;
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
  var лок»нт : —правочники.интјдрес—оц—трах;
    лок‘изЋицо = лок—отрудник.‘изЋицо;
    локјдрес_‘Ћ = “ЅЅ_Ѕазовый.Ѕиблио.ѕолучитьјдрес—убъекта(лок‘изЋицо,Today);
    if (локјдрес_‘Ћ <> nil) :
      лок»нт = —правочники.интјдрес—оц—трах.—оздать опиюƒл€«а€вки»“ипа(локјдрес_‘Ћ,Self.Record,тапѕрописка);
      лок»нт.Record.Post;
    else
      лок»нт = —правочники.интјдрес—оц—трах.—оздатьѕо«а€вке»“ипу(Self.Record,тапѕрописка);
      лок»нт.Record.Post;
    fi;
end;



proc —оздатьƒанныеƒл€ѕособи€ѕоЅЋ;
  var лок»нтƒанные : ƒанные.инт—ведени€–еестраЅЋ;
    лок»нтƒанные = ƒанные.инт—ведени€–еестраЅЋ.Create;
    лок»нтƒанные.Ќова€«аписьѕо«а€вке(Self.Record);
    лок»нтƒанные. опировать»зЅольничногоЋиста(Self.Record.Ќазначениеѕособи€);
    лок»нтƒанные.Record.Post;
end;

proc —оздать–асчетѕособи€;
  var лок»нт–асчет : ƒанные.инт–асчет–еестраЅЋ;
    лок»нт–асчет = ƒанные.инт–асчет–еестраЅЋ.Create;
    лок»нт–асчет.Ќова€«аписьѕо«а€вке(Self.Record);
    if (Self.Record.Ќазначениеѕособи€.ЅольничныйЋист <> nil) :
      --лок»нт–асчет. опировать»зЅольничногоЋиста(Self.Record.Ќазначениеѕособи€);
    fi;
    лок»нт–асчет.Record.Post;
end;

proc —оздатьƒанныеƒл€ѕособи€–анние—рокиЅерем;
  var лок»нтƒанные : ƒанные.инт—ведени€–еестраЅЋ;
    лок»нтƒанные = ƒанные.инт—ведени€–еестраЅЋ.Create;
    лок»нтƒанные.Ќова€«аписьѕо«а€вке(Self.Record);
    лок»нтƒанные.«аписать—правкуќ–анних—роках(Self.Record.Ќазначениеѕособи€);
    лок»нтƒанные.Record.Post;
end;



end