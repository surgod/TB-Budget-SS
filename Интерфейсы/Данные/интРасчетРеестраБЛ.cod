class inherited МашинаРеквизитов.Базовые.интЗапись "Интерфейс записи РасчетВремНетрудИБеременность";

import classes Константы,ФункцииПримененияКостант;--,ФункцииДанных;

inclass public

  func СвязанныйКлассЗаписей: class СИС2.Базовая.БазоваяЗапись;
    Result = Данные.РасчетРеестраБЛ;
  end;

  func Create: Данные.интРасчетРеестраБЛ;
    Result = inherited Create;
    Result.Record = Данные.РасчетРеестраБЛ.Create;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Данные.РасчетРеестраБЛ): Данные.интРасчетРеестраБЛ;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func БланкРедакторПоУмолчанию: class BlankForm;
    Result = nil;
  end;

  func КартотекаПоУмолчанию: class CardForm;
    Result = nil;
  end;

func ОткрытьПоЗаявке (локЗаявка : Данные.ЗаявкаНаНазначениеПособия): Данные.интРасчетРеестраБЛ;
  var локРасчет : Данные.РасчетРеестраБЛ;
    Result = nil;
    if (локЗаявка = nil) :
      return nil;
    fi;
    локРасчет = НайтиЗаписьПоЗаявке(локЗаявка);
    if (локРасчет = nil) :
      return nil;
    fi;
    Result = ОткрытьПоЗаписи(локРасчет);
end;


func НайтиЗаписьПоЗаявке(локЗаявка : Данные.ЗаявкаНаНазначениеПособия) :  Данные.РасчетРеестраБЛ;
var локФильтр : string;
  локФильтр = 'ЗаявкаНаНазначениеПособия = ' + Str(локЗаявка);
  Result = СИС2.ФункцииДокумента.QueryRecord(Данные.РасчетРеестраБЛ, локФильтр);
end;

proc СоздатьЗаписьПоЗаявке(локЗаявка : Данные.ЗаявкаНаНазначениеПособия);
  var локИнт : Данные.интРасчетРеестраБЛ;
    if (локЗаявка.ТипПособия = ТипПособияРанСрок) :
      return;
    fi;
    локИнт = Данные.интРасчетРеестраБЛ.Create;
    локИнт.НоваяЗаписьПоЗаявке(локЗаявка);

    локИнт.Record.Post;
end;



inobject public

  Record: Данные.РасчетРеестраБЛ;

proc ИнициализироватьПоУмолчанию synonym InitByDefault;
  inherited InitByDefault;
end;

proc НоваяЗаписьПоЗаявке(локЗаявка : Данные.ЗаявкаНаНазначениеПособия);
  ИнициализироватьПоУмолчанию;
  Self.Record.ЗаявкаНаНазначениеПособия = локЗаявка;
  if (локЗаявка.НазначениеПособия = nil) :
    return;
  fi;
  КопироватьИзБольничногоЛиста(локЗаявка.НазначениеПособия);
  ЗаписатьРасчетСС(локЗаявка.НазначениеПособия);
end;

proc КопироватьИзБольничногоЛиста(локНазначениеПособия : Бюджет_ЗПиДД.РасчетныеОперации.НазначениеПособия);
  var локБольничныйЛист : Бюджет_Персонал.Документы.Кадры.БольничныйЛист;
  --if (Self.Record.State <> Record.Created) then
  --  Self.Record.Edit;
  --end;
  if (локНазначениеПособия = nil) :
    return;
  fi;
  локБольничныйЛист = локНазначениеПособия.БольничныйЛист;
  if (локБольничныйЛист = nil) :
    return;
  fi;
  Self.Record.СтаховойСтажЛет = локБольничныйЛист.СтаховойСтажЛет;
  Self.Record.СтаховойСтажМес = локБольничныйЛист.СтаховойСтажМес;
  Self.Record.НестраховойПериодЛет = локБольничныйЛист.НестраховойПериодЛет;
  Self.Record.НестраховойПериодМес = локБольничныйЛист.НестраховойПериодМес;
  Self.Record.ДатаНачалаОплаты = локБольничныйЛист.ДатаНачалаОплаты;
  Self.Record.ДатаОкончанияОплаты = локБольничныйЛист.ДатаОкончанияОплаты;
end;

proc ЗаписатьРасчетСС(локНазначениеПособия : Бюджет_ЗПиДД.РасчетныеОперации.НазначениеПособия);
  var i,j : integer;
  var локИнт : Бюджет_ЗПиДД.Рабочие.интРасчетСзСС;
  var локРасчетСзСС : Бюджет_ЗПиДД.РасчетныеОперации.СреднийЗаработокСС;
    локИнт = Бюджет_ЗПиДД.Рабочие.интРасчетСзСС.НайтиПоЗаписиНазначенияПособия(локНазначениеПособия);
    if (локИнт = nil) :
      return;
    fi;
    локРасчетСзСС = локИнт.Record;
    if (локРасчетСзСС <> nil) :
      for i = 1..локРасчетСзСС.ГодРасчета.Count do
        j = Self.Record.ГодРасчета.Add;
        Self.Record.ГодРасчета[j].УчетныйГод = локРасчетСзСС.ГодРасчета[i].УчетныйГод;
        Self.Record.ГодРасчета[j].СуммаВРасчете = локРасчетСзСС.ГодРасчета[i].СуммаВРасчете;
        Self.Record.ГодРасчета[j].КДВРасчете = локРасчетСзСС.ГодРасчета[i].КДКорр;
      end;
    fi;
    j = Self.Record.ГодРасчета.Count;
    if (j <> 0) :
      Self.Record.ГодВРасчете1 = Self.Record.ГодРасчета[1].УчетныйГод;
      if (Self.Record.ГодРасчета[1].СуммаВРасчете <> 0 and Self.Record.ГодРасчета[1].КДВРасчете <> 0) :
        Self.Record.СреднийЗаработок1 = Round(Self.Record.ГодРасчета[1].СуммаВРасчете / Self.Record.ГодРасчета[1].КДВРасчете,2);
      fi;
      Self.Record.ГодВРасчете2 = Self.Record.ГодРасчета[j].УчетныйГод;
      if (Self.Record.ГодРасчета[j].СуммаВРасчете <> 0 and Self.Record.ГодРасчета[j].КДВРасчете <> 0) :
        Self.Record.СреднийЗаработок1 = Round(Self.Record.ГодРасчета[j].СуммаВРасчете / Self.Record.ГодРасчета[j].КДВРасчете,2);
      fi;
    fi;
end;

--для полей, заданных в бланках как вычислимые поля

func ПолеРедактораПриВыводе(локИмяПоля : string) : variant;
  Result = '';
  if (локИмяПоля = 'Стаж_Реестр') :
    return Стаж_Реестр;
  elsif (локИмяПоля = 'ТрудДогДо_6_Месяцев_Реестр') :
    return ТрудДогДо_6_Месяцев_Реестр;
  elsif (локИмяПоля = 'УсловияИсчисления_Реестр') :
    return УсловияИсчисления_Реестр;
  elsif (локИмяПоля = 'ПериодыПростоя_Реестр') :
    return ПериодыПростоя_Реестр;
  elsif (локИмяПоля = 'ПериодОпаты_Реестр') :
    return ПериодОпаты_Реестр;
  elsif (локИмяПоля = 'РасчетныйПериод_Реестр') :
    return РасчетныйПериод_Реестр;
  elsif (локИмяПоля = 'СреднийЗаработок_Реестр') :
    return СреднийЗаработок_Реестр;
  elsif (локИмяПоля = 'НеполнаяСтавка_Реестр') :
    return НеполнаяСтавка_Реестр;
  elsif (локИмяПоля = 'ИнаяИнформация_Реестр') :
    return ИнаяИнформация_Реестр;
  fi;
end;


inobject private

func Стаж_Реестр : string;
  var ss1,ss2 : string;
    Result = '';
    ss1 = СтажСтрокой(Self.Record.СтаховойСтажЛет,Self.Record.СтаховойСтажМес);
    ss2 = '';
    if (Self.Record.НестраховойПериодЛет <> 0 or Self.Record.НестраховойПериодМес <> 0) :
      ss2 = СтажСтрокой(Self.Record.НестраховойПериодЛет,Self.Record.НестраховойПериодМес);
    fi;
    if (ss1 <> '') :
      Result = 'Стаж '+ ss1;
    fi;
    if (ss2 <> '') :
      Result = ' / в т.ч. нестрах.периоды '+ ss2;
    fi;
end;

func ТрудДогДо_6_Месяцев_Реестр : string;
  return Период_С_По(Self.Record.ТрудДогДо_6_Месяцев_С,Self.Record.ТрудДогДо_6_Месяцев_По);
end;

func УсловияИсчисления_Реестр : string;
  Result = '';
  if (Self.Record.КодУсловийИсчисления1 <> '') :
    Result = Self.Record.КодУсловийИсчисления1;
  fi;
  if (Self.Record.КодУсловийИсчисления2 <> '') :
    Result = Result + if(Result <> '' : ',', '') + Self.Record.КодУсловийИсчисления2;
  fi;
  if (Self.Record.КодУсловийИсчисления3 <> '') :
    Result = Result + if(Result <> '' : ',', '') + Self.Record.КодУсловийИсчисления3;
  fi;
end;

func ПериодыПростоя_Реестр : string;
 var i : integer;
 var ss : string;
 var aTxt: string[];
   Result = '';
   aTxt  = nil;
   if (Self.Record.ПериодыПростоя.Count = 0) :
     return '';
   fi;
   for i = 1..Self.Record.ПериодыПростоя.Count do
     ss = Период_С_По(Self.Record.ПериодыПростоя[i].ПериодПростоя_С,Self.Record.ПериодыПростоя[i].ПериодПростоя_По);
     if (ss <> '') :
       InsertInArray(aTxt,LengthOfArray(aTxt) + 1, ss);
       if (LengthOfArray(aTxt) > 1) :
         aTxt[LengthOfArray(aTxt)-1] = aTxt[LengthOfArray(aTxt)-1] + ';';
       fi;
     fi;
   end;
   if (LengthOfArray(aTxt) <> 0) :
     return СИС2.СтроковыеФункции.МассивСтрокВТекст(aTxt);
   fi;
end;

func ПериодОпаты_Реестр : string;
  return Период_С_По(Self.Record.ДатаНачалаОплаты,Self.Record.ДатаОкончанияОплаты);
end;

func РасчетныйПериод_Реестр : string;
 var i : integer;
 var aTxt: string[];
   Result = '';
   aTxt  = nil;
   i = 0;
   if (Self.Record.ГодВРасчете1 <> 0) :
     i = i + 1;
     aTxt[i] = 'с ' + Str(Self.Record.ГодВРасчете1);
     if (Self.Record.ДатаЗаявления1 <> nil) :
       aTxt[i] = aTxt[i] + ' ( ' + Str(Self.Record.ДатаЗаявления1) + ')';
     fi;
   fi;
   if (Self.Record.ГодВРасчете2 <> 0) :
     i = i + 1;
     aTxt[i] = 'по ' + Str(Self.Record.ГодВРасчете2);
     if (Self.Record.ДатаЗаявления2 <> nil) :
       aTxt[i] = aTxt[i] + ' ( ' + Str(Self.Record.ДатаЗаявления2) + ')';
     fi;
   fi;
   if (LengthOfArray(aTxt) = 1) :
     return aTxt[1];
   elsif (LengthOfArray(aTxt) = 2) :
     return СИС2.СтроковыеФункции.МассивСтрокВТекст(aTxt);
   fi;
end;

func СреднийЗаработок_Реестр : string;
 var i : integer;
 var aTxt: string[];
   Result = '';
   aTxt  = nil;
   i = 0;
   if (Self.Record.СреднийЗаработок1 <> 0 or Self.Record.ГодВРасчете1 <> 0) :
     i = i + 1;
     aTxt[i] = Str(Self.Record.СреднийЗаработок1,2) +'р. за '+ Str(Self.Record.ГодВРасчете1) +'г.';
   fi;
   if (Self.Record.СреднийЗаработок2 <> 0 or Self.Record.ГодВРасчете2 <> 0) :
     i = i + 1;
     aTxt[i] = Str(Self.Record.СреднийЗаработок2,2) +'р. за '+ Str(Self.Record.ГодВРасчете2) +'г.';
   fi;
   if (LengthOfArray(aTxt) = 1) :
     return aTxt[1];
   elsif (LengthOfArray(aTxt) = 2) :
     return СИС2.СтроковыеФункции.МассивСтрокВТекст(aTxt);
   fi;
end;

func НеполнаяСтавка_Реестр : string;
  Result = '';
  if (Self.Record.НеполнаяСтавка <> 0) :
    return Str(Self.Record.НеполнаяСтавка,2);
  fi;
end;

func ИнаяИнформация_Реестр : string;
  return Self.Record.ИнаяИнформация;
end;


func СтажСтрокой(локЛет : integer; локМесяцев : integer) : string;
  var ss : string;
    Result = '';
    if (локЛет <> 0) :
      Result = СтажСтрокойГоды(локЛет);
    fi;
    ss = '';
    if (локМесяцев <> 0) :
      ss = Str(локМесяцев) + 'мес.';
    fi;
    Result = Result + if(Result <>'' and ss <>' ' : ' ', '') + ss;
end;

func СтажСтрокойГоды(локЛет : integer) : string;
  var ii,jj : integer;
  var ss : string;
    Result = Str(локЛет);
    ii = локЛет - Int(Trunc(локЛет/10)) * 10;
    jj = локЛет - Int(Trunc(локЛет/100)) * 100;
    ss = 'лет';
    if (ii = 1 and jj <> 11) :
      ss = 'год';
    elsif ((ii  in [2,3,4]) and (not jj in [12,13,14])) :
      ss = 'года';
    fi;
    Result = Result + ' ' + ss;
end;

func Период_С_По(локДата1 : date; локДата2 : date) : string;
  Result = '';
  if (локДата1 <> nil) :
    Result = 'с '+ Str(локДата1);
  fi;
  if (локДата2 <> nil) :
    Result = Result + ' по '+ Str(локДата2);
  fi;
end;



end