class inherited МашинаРеквизитов.Базовые.интЗапись "Интерфейс записи РасчетВремНетрудИБеременность";

import classes Константы,ФункцииПримененияКостант;--,ФункцииДанных;

inclass public

  func СвязанныйКлассЗаписей: class СИС2.Базовая.БазоваяЗапись;
    Result = Данные.РасчетВремНетрудИБеременность;
  end;

  func Create: Данные.интРасчетВремНетрудИБеременность;
    Result = inherited Create;
    Result.Record = Данные.РасчетВремНетрудИБеременность.Create;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Данные.РасчетВремНетрудИБеременность): Данные.интРасчетВремНетрудИБеременность;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func БланкРедакторПоУмолчанию: class BlankForm;
    Result = nil;
  end;

  func КартотекаПоУмолчанию: class CardForm;
    Result = nil;
  end;

func НайтиЗаписьПоЗаявке(локЗаявка : Данные.ЗаявкаНаНазначениеПособия) :  Данные.РасчетВремНетрудИБеременность;
var локФильтр : string;
  локФильтр = 'ЗаявкаНаНазначениеПособия = ' + Str(локЗаявка);
  Result = СИС2.ФункцииДокумента.QueryRecord(Данные.РасчетВремНетрудИБеременность, локФильтр);
end;


inobject public

  Record: Данные.РасчетВремНетрудИБеременность;

proc ИнициализироватьПоУмолчанию synonym InitByDefault;
  inherited InitByDefault;
end;

proc НоваяЗаписьПоЗаявке(локЗаявка : Данные.ЗаявкаНаНазначениеПособия);
  ИнициализироватьПоУмолчанию;
  Self.Record.ЗаявкаНаНазначениеПособия = локЗаявка;
  if (локЗаявка.НазначениеПособия = nil) :
    return;
  fi;
  ЗаписатьРасчетСС(локЗаявка.НазначениеПособия);
end;

proc КопироватьИзБольничногоЛиста(локБольничныйЛист : Бюджет_Персонал.Документы.Кадры.БольничныйЛист);
  if (Self.Record.State <> Record.Created) then
    Self.Record.Edit;
  end;
  if (локБольничныйЛист = nil) :
    return;
  fi;
  Self.Record.СтаховойСтажЛет = локБольничныйЛист.СтаховойСтажЛет;
  Self.Record.СтаховойСтажМес = локБольничныйЛист.СтаховойСтажМес;
  Self.Record.НестраховойПериодЛет = локБольничныйЛист.НестраховойПериодЛет;
  Self.Record.НестраховойПериодМес = локБольничныйЛист.НестраховойПериодМес;
  Self.Record.ДатаНачалаОплаты = локБольничныйЛист.ДатаНачалаОплаты;
  Self.Record.ДатаОкончанияОплаты = локБольничныйЛист.ДатаОкончанияОплаты;
end;

proc ЗаписатьРасчетСС(локНазначение : Бюджет_ЗПиДД.РасчетныеОперации.НазначениеПособия);
  var i,j : integer;
  var локИнт : Бюджет_ЗПиДД.Рабочие.интРасчетСзСС;
  var локРасчетСзСС : Бюджет_ЗПиДД.РасчетныеОперации.СреднийЗаработокСС;
    локИнт = Бюджет_ЗПиДД.Рабочие.интРасчетСзСС.НайтиПоЗаписиНазначенияПособия(локНазначение);
    локРасчетСзСС = локИнт.Record;
    if (локРасчетСзСС <> nil) :
      for i = 1..локРасчетСзСС.ГодРасчета.Count do
        j = Self.Record.ГодРасчета.Add;
        Self.Record.ГодРасчета[j].УчетныйГод = локРасчетСзСС.ГодРасчета[i].УчетныйГод;
        Self.Record.ГодРасчета[j].СуммаВРасчете = локРасчетСзСС.ГодРасчета[i].СуммаВРасчете;
        Self.Record.ГодРасчета[j].КДВРасчете = локРасчетСзСС.ГодРасчета[i].КДКорр;
      end;
    fi;
end;


end