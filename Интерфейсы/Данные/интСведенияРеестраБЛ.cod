class inherited ћашина–еквизитов.Ѕазовые.инт«апись "»нтерфейс записи  ƒанныеƒл€¬ремЌетруд»Ѕерем";

import classes  онстанты,‘ункцииѕрименени€ остант;--,‘ункцииƒанных;

inclass public

  func —в€занный ласс«аписей: class —»—2.Ѕазова€.Ѕазова€«апись;
    Result = ƒанные.—ведени€–еестраЅЋ;
  end;

  func Create: ƒанные.инт—ведени€–еестраЅЋ;
    Result = inherited Create;
    Result.Record = ƒанные.—ведени€–еестраЅЋ.Create;
  end;

  func ќткрытьѕо«аписи synonym OpenRecord (locRecord: ƒанные.—ведени€–еестраЅЋ): ƒанные.инт—ведени€–еестраЅЋ;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func Ѕланк–едакторѕо”молчанию: class BlankForm;
    Result = nil;
  end;

  func  артотекаѕо”молчанию: class CardForm;
    Result = nil;
  end;

--дл€ соц.страх.

func ќткрытьѕо«а€вке (лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€): ƒанные.инт—ведени€–еестраЅЋ;
  var лок—ведени€ : ƒанные.—ведени€–еестраЅЋ;
    Result = nil;
    if (лок«а€вка = nil) :
      return nil;
    fi;
    лок—ведени€ = Ќайти«аписьѕо«а€вке(лок«а€вка);
    if (лок—ведени€ = nil) :
      return nil;
    fi;
    Result = ќткрытьѕо«аписи(лок—ведени€);
end;


func Ќайти«аписьѕо«а€вке(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€) :  ƒанные.—ведени€–еестраЅЋ;
var лок‘ильтр : string;
  лок‘ильтр = '«а€вкаЌаЌазначениеѕособи€ = ' + Str(лок«а€вка);
  Result = —»—2.‘ункцииƒокумента.QueryRecord(ƒанные.—ведени€–еестраЅЋ, лок‘ильтр);
end;

inobject public

  Record: ƒанные.—ведени€–еестраЅЋ;


proc »нициализироватьѕо”молчанию synonym InitByDefault;
  inherited InitByDefault;
end;

proc Ќова€«аписьѕо«а€вке(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€);
  »нициализироватьѕо”молчанию;
  Self.Record.«а€вкаЌаЌазначениеѕособи€ = лок«а€вка;
end;

proc  опировать»зЅольничногоЋиста(локЅольничныйЋист : Ѕюджет_ѕерсонал.ƒокументы. адры.ЅольничныйЋист);
  if (Self.Record.State <> Record.Created) then
    Self.Record.Edit;
  end;
  if (локЅольничныйЋист = nil) :
    return;
  fi;
  Self.Record.“ип‘ормыЅЋ = if(локЅольничныйЋист.ЁтоЁЋЌ : “ип‘ормыЅЋЁл,“ип‘ормыЅЋЅум);
  if (локЅольничныйЋист.ѕродолжение <> nil) :
    Self.Record.ѕродолжениеЅЋ = локЅольничныйЋист.ѕродолжение.Ќомерƒок;
  fi;
  Self.Record.ƒатаЅЋ = локЅольничныйЋист.ƒатаƒок;
  Self.Record.ЌомерЅЋ = локЅольничныйЋист.Ќомерƒок;

  Self.Record. одѕричины = локЅольничныйЋист. одѕричины;
  Self.Record. одѕричиныƒоп = локЅольничныйЋист. одѕричиныƒоп;
  Self.Record. одѕричины»зм = локЅольничныйЋист. одѕричины»зм;

  Self.Record.ƒата1 = локЅольничныйЋист.ƒата1;
  Self.Record.ƒата2 = локЅольничныйЋист.ƒата2;
  Self.Record.Ќомерѕутевки = локЅольничныйЋист.Ќомерѕутевки;

  Self.Record.¬озрастЋет1 = локЅольничныйЋист.¬озрастЋет1;
  Self.Record.¬озрастћес1 = локЅольничныйЋист.¬озрастћес1;
  Self.Record. од–одства1 = локЅольничныйЋист. од–одства1;
  Self.Record.‘ио„—1 = локЅольничныйЋист.‘ио„—1;

  Self.Record.¬озрастЋет2 = локЅольничныйЋист.¬озрастЋет2;
  Self.Record.¬озрастћес2 = локЅольничныйЋист.¬озрастћес2;
  Self.Record. од–одства2 = локЅольничныйЋист. од–одства2;
  Self.Record.‘ио„—2 = локЅольничныйЋист.‘ио„—2;


  --Self.Record.Ќа”чете–—Ѕ = локЅольничныйЋист.Ќа”чете–—Ѕ;

  Self.Record. одЌарушени€–ежима = локЅольничныйЋист. одЌарушени€–ежима;
  Self.Record.ƒатаЌарушени€–ежима = локЅольничныйЋист.ƒатаЌарушени€–ежима;

  Self.Record.ƒата—тационар1 = локЅольничныйЋист.ƒатаЌарушени€–ежима;
  Self.Record.ƒата—тационар2 = локЅольничныйЋист.ƒата—тационар2;

  Self.Record.ƒатаЌачала = локЅольничныйЋист.ƒатаЌачала;
  Self.Record.ƒатаќкончани€ = локЅольничныйЋист.ƒатаќкончани€;
  Self.Record.ƒней¬сегоЅолезни = локЅольничныйЋист.ƒней¬сегоЅолезни;

  --Self.Record. од»ногоќкончани€ = локЅольничныйЋист. од»ногоќкончани€;
  --Self.Record.ƒата»ногоќкончани€ = локЅольничныйЋист.ƒата»ногоќкончани€;


  Self.Record.ƒатајктЌ1 = локЅольничныйЋист.ƒатајктЌ1;

  --Self.Record.Post;
end;

proc «аписать—правкуќ–анних—роках(локЌазначение : Ѕюджет_«ѕиƒƒ.–асчетныеќперации.Ќазначениеѕособи€);
  Self.Record.Ќомер—правки = локЌазначение.Ќомерƒок;
  Self.Record.ƒата—правки = локЌазначение.ƒатаƒок;
end;

proc «агрузитьѕол€¬–едактор«а€вки(лок‘орма : BlankForm);
  «агрузитьѕол€¬ѕеременныеЅланка(лок‘орма,«агрузка¬–едактор«а€вки);
end;

--дл€ полей, заданных в бланках как вычислимые пол€

func ѕоле–едактораѕри¬ыводе(лок»м€ѕол€ : string) : string;
  Result = '';
  if (лок»м€ѕол€ = 'ЌомерЅЋ_–еестр') :
    return ЌомерЅЋ_–еестр;
  elsif (лок»м€ѕол€ = 'ѕричина_–еестр') :
    return ѕричина_–еестр;
  elsif (лок»м€ѕол€ = '„лен—емьи1_–еестр') :
    return „лен—емьи_–еестр(1);
  elsif (лок»м€ѕол€ = '„лен—емьи2_–еестр') :
    return „лен—емьи_–еестр(2);
  elsif (лок»м€ѕол€ = '«аключениећ—Ё_–еестр') :
    return «аключениећ—Ё_–еестр;
  elsif (лок»м€ѕол€ = 'Ќарушение–ежима_–еестр') :
    return Ќарушение–ежима_–еестр;
  fi;
end;

proc «агрузитьѕол€¬Ѕланк¬вода(лок‘орма : BlankForm ; лок»м€ѕол€ : string);
  if (лок»м€ѕол€ = 'ЌомерЅЋ_–еестр') :
    «агрузитьѕол€¬ѕеременныеЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_ЌомерЅЋ);
  elsif (лок»м€ѕол€ = 'ѕричина_–еестр') :
    «агрузитьѕол€¬ѕеременныеЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_ѕричина);
  elsif (лок»м€ѕол€ = '„лен—емьи1_–еестр') :
    «агрузитьѕол€¬ѕеременныеЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_„лен—емьи1);
  elsif (лок»м€ѕол€ = '„лен—емьи2_–еестр') :
    «агрузитьѕол€¬ѕеременныеЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_„лен—емьи2);
  elsif (лок»м€ѕол€ = 'Ќарушение–ежима_–еестр') :
    «агрузитьѕол€¬ѕеременныеЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_Ќарушение–ежима);
  fi;
end;

proc ѕрочитатьѕол€»зЅланка¬вода(лок‘орма : BlankForm ; лок»м€ѕол€ : string);
  if (лок»м€ѕол€ = 'ЌомерЅЋ_–еестр') :
    ѕрочитатьѕол€»зѕеременныхЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_ЌомерЅЋ);
  elsif (лок»м€ѕол€ = 'ѕричина_–еестр') :
    ѕрочитатьѕол€»зѕеременныхЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_ѕричина);
  elsif (лок»м€ѕол€ = '„лен—емьи1_–еестр') :
    ѕрочитатьѕол€»зѕеременныхЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_„лен—емьи1);
  elsif (лок»м€ѕол€ = '„лен—емьи2_–еестр') :
    ѕрочитатьѕол€»зѕеременныхЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_„лен—емьи2);
  elsif (лок»м€ѕол€ = 'Ќарушение–ежима_–еестр') :
    ѕрочитатьѕол€»зѕеременныхЅланка(лок‘орма,«агрузка¬Ѕланк¬вода_Ќарушение–ежима);
  fi;
  Self.Record.Modified = true;
end;

proc »зменить«аключениећ—Ё;
  Self.Record.«аключениећ—Ё = not Self.Record.«аключениећ—Ё;
  Self.Record.Modified = true;
end;

inobject private

  --списки полей дл€ загрузки в бланк: ['им€ пол€ записи', 'переменна€ бланка']

  var «агрузка¬–едактор«а€вки[2] : string =[['“ип‘ормыЅЋ','“ип‘ормыЅЋ'],
                                             ['ƒатаЅЋ','ƒатаЅЋ'],
                                             ['ƒата—тационар1','ƒата—тационар1ЅЋ'],
                                             ['ƒата—тационар2','ƒата—тационар2ЅЋ'],
                                             ['ƒатаЌачалаЅЋ','ƒатаЌачала'],
                                             ['ƒатаќкончани€ЅЋ','ƒатаќкончани€'],
                                             ['ƒата¬ыходаЌа–аботу','ƒата¬ыходаЌа–аботу'],
                                             ['ƒата–егистрации¬_ћ—Ё','ƒата–егистрации¬_ћ—Ё']
                                            ];


  var «агрузка¬Ѕланк¬вода_ЌомерЅЋ[2] : string = [['ЌомерЅЋ','ЌомерЅЋ'],
                                                 ['ѕродолжениеЅЋ','ѕродолжениеЅЋ']
                                                ];


  var «агрузка¬Ѕланк¬вода_ѕричина[2] : string = [[' одѕричины',' одѕричины'],
                                                 [' одѕричиныƒоп',' одѕричиныƒоп'],
                                                 [' одѕричины»зм',' одѕричины»зм'],
                                                 ['ƒата1','ƒата1']
                                                ];

  var «агрузка¬Ѕланк¬вода_„лен—емьи1[2] : string = [['‘ио„—1','‘ио„—'],
                                                    ['¬озрастЋет1','¬озрастЋет'],
                                                    ['¬озрастћес1','¬озрастћес'],
                                                    [' од–одства1',' од–одства'],
                                                    ['√руппа»нв_„—1','√руппа»нв_„—']
                                                   ];

  var «агрузка¬Ѕланк¬вода_„лен—емьи2[2] : string = [['‘ио„—2','‘ио„—'],
                                                    ['¬озрастЋет2','¬озрастЋет'],
                                                    ['¬озрастћес2','¬озрастћес'],
                                                    [' од–одства2',' од–одства'],
                                                    ['√руппа»нв_„—2','√руппа»нв_„—']
                                                   ];

  var «агрузка¬Ѕланк¬вода_Ќарушение–ежима[2] : string = [[' одЌарушени€–ежима',' одЌарушени€–ежима'],
                                                         ['ƒатаЌарушени€–ежима','ƒатаЌарушени€–ежима']
                                                        ];



proc «агрузитьѕол€¬ѕеременныеЅланка(лок‘орма : BlankForm; локЎаблон«агрузки[2] : string);
  var i,nn : integer;
  var лок«начение : variant;
    nn = LengthOfArray(локЎаблон«агрузки);
    for i = 1..nn do
      лок«начение = Self.Record.GetField(локЎаблон«агрузки[i,1]);
      лок‘орма.SetField(локЎаблон«агрузки[i,2],лок«начение);
    end;
end;

proc ѕрочитатьѕол€»зѕеременныхЅланка(лок‘орма : BlankForm; локЎаблон«агрузки[2] : string);
  var i,nn : integer;
  var лок«начение : variant;
    nn = LengthOfArray(локЎаблон«агрузки);
    for i = 1..nn do
      лок«начение = лок‘орма.GetField(локЎаблон«агрузки[i,2]);
      Self.Record.SetField(локЎаблон«агрузки[i,1],лок«начение);
    end;
end;


func ЌомерЅЋ_–еестр : string;
  Result = Self.Record.ЌомерЅЋ;
  if (Self.Record.ѕродолжениеЅЋ <> '') :
    Result = Result + '(' + Self.Record.ѕродолжениеЅЋ +')';
  fi;
end;

func ѕричина_–еестр : string;
  Result = Self.Record. одѕричины;
  if (Self.Record. одѕричиныƒоп <> '') :
    Result = Result + ',' + Self.Record. одѕричиныƒоп;
  fi;
  if (Self.Record. одѕричины»зм <> '') :
    Result = Result + ',' + Self.Record. одѕричины»зм;
  fi;
  if (Self.Record.ƒата1 <> nil) :
    Result = Result + ',' + Str(Self.Record.ƒата1);
  fi;
end;

func „лен—емьи_–еестр(лок»ндекс : integer) : string;
  var лок‘»ќ,лок¬озраст,лок–одство,лок√р»нв  : string;
    лок‘»ќ = Ќайти‘»ќ_„—(лок»ндекс);
    лок¬озраст = Ќайти¬озраст_„—(лок»ндекс);
    лок–одство = Ќайти–одство_„—(лок»ндекс);
    лок√р»нв = Ќайти√р»нв_„—(лок»ндекс);
    Result = лок‘»ќ;
    Result = Result + if(Result <> '' and лок¬озраст<> '' : ',', '') + лок¬озраст;
    Result = Result + if(Result <> '' and лок–одство<> '' : ',', '') + лок–одство;
    Result = Result + if(Result <> '' and лок√р»нв<> '' : ',', '') + лок√р»нв;
end;

func «аключениећ—Ё_–еестр : string;
  return if(Self.Record.«аключениећ—Ё : 'ƒа' , '');
end;

func Ќарушение–ежима_–еестр : string;
  Result = Self.Record. одЌарушени€–ежима;
  if (Self.Record.ƒатаЌарушени€–ежима<> nil) :
    Result = Result + if(Result <> '' : ',', '') + Str(Self.Record.ƒатаЌарушени€–ежима);
  fi;
end;




func Ќайти‘»ќ_„—(лок»ндекс : integer) : string;
  Result = '';
  if (лок»ндекс = 1) :
    return  Self.Record.‘ио„—1;
  elsif (лок»ндекс = 2) :
    return  Self.Record.‘ио„—2;
  fi;
end;

func Ќайти¬озраст_„—(лок»ндекс : integer) : string;
  Result = '';
  if (лок»ндекс = 1) :
    if (Self.Record.¬озрастЋет1 >=1) :
      return ¬озраст—трокой√оды(Self.Record.¬озрастЋет1);
    elsif (Self.Record.¬озрастЋет1 =0 and Self.Record.¬озрастћес1 <> 0) :
      return ¬озраст—трокойћес€цы(Self.Record.¬озрастћес1);
    fi;
  elsif (лок»ндекс = 2) :
    if (Self.Record.¬озрастЋет2 >=1) :
      return ¬озраст—трокой√оды(Self.Record.¬озрастЋет2);
    elsif (Self.Record.¬озрастЋет2 =0 and Self.Record.¬озрастћес2 <> 0) :
      return ¬озраст—трокойћес€цы(Self.Record.¬озрастћес2);
    fi;
  fi;
end;

func Ќайти–одство_„—(лок»ндекс : integer) : string;
  Result = '';
  if (лок»ндекс = 1) :
    if (Self.Record. од–одства1 <> '') :
      Result = Self.Record. од–одства1;
    fi;
  elsif (лок»ндекс = 2) :
    if (Self.Record. од–одства2 <> '') :
    fi;
  fi;
end;

func Ќайти√р»нв_„—(лок»ндекс : integer) : string;
  Result = '';
  if (лок»ндекс = 1) :
    if (Self.Record.√руппа»нв_„—1 <> 0 ) :
      return Str(Self.Record.√руппа»нв_„—1);
    fi;
  elsif (лок»ндекс = 2) :
    if (Self.Record.√руппа»нв_„—2 <> 0 ) :
      return Str(Self.Record.√руппа»нв_„—2);
    fi;
  fi;
end;

func ¬озраст—трокой√оды(¬озрастЋет : integer) : string;
  var ii,jj : integer;
  var ss : string;
    Result = Str(¬озрастЋет);
    ii = ¬озрастЋет - Int(Trunc(¬озрастЋет/10)) * 10;
    jj = ¬озрастЋет - Int(Trunc(¬озрастЋет/100)) * 100;
    ss = 'лет';
    if (ii = 1 and jj <> 11) :
      ss = 'год';
    elsif ((ii  in [2,3,4]) and (not jj in [12,13,14])) :
      ss = 'года';
    fi;
    Result = Result + ' ' + ss;
end;

func ¬озраст—трокойћес€цы(¬озрастћес : integer) : string;
  var ss : string;
    Result = Str(¬озрастћес);
    ss = 'мес€цев';
    if (¬озрастћес = 1) :
      ss = 'мес€ц';
    elsif (¬озрастћес  in [2,3,4]) :
      ss = 'мес€ца';
    fi;
    Result = Result + ' ' + ss;
end;




end