class inherited МашинаРеквизитов.Базовые.интЗапись "Интерфейс заявления";

import classes Константы;
import СИС2 classes Константы,ФункцииРТТИ,ФункцииДокумента;

inclass public

  proc ИнициализироватьИнтерфейс synonym InitInterface;
    var локМетод : MethodInfo;
    var локПолнИмя : string;
      inherited InitInterface;
      локПолнИмя = "Бюджет_СоцСтрах.Документы.интЗаявление.ОчиститьДопДокументыПередУдалением";
      локМетод = ПолучитьИнфоМетодаПоПолномуИмениМетода(локПолнИмя);
      СобытиеПередУдалением.AddMethod(локМетод);
  end;


  func СвязанныйКлассЗаписей: class СИС2.Базовая.БазоваяЗапись;
    Result = Документы.Заявление;
  end;

  func Create: Документы.интЗаявление;
    Result = inherited Create;
    Result.Record = Документы.Заявление.Create;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Документы.Заявление): Документы.интЗаявление;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func БланкРедакторПоУмолчанию: class BlankForm;
    Result = Документы.РедЗаявление;
  end;

  func КартотекаПоУмолчанию: class CardForm;
    Result = Документы.картЗаявление;
  end;


  func ОчиститьДопДокументыПередУдалением (локПарам: variant[]): logical;
    var локЗаявление: Документы.Заявление;
    Result = nil;
    локЗаявление = локПарам[2];
    if (локЗаявление = nil):
      return;
    fi;
    ОчиститьПоКлассуЗаписи (локЗаявление,Документы.ДополнительныеДокументы.Адрес);
    ОчиститьПоКлассуЗаписи (локЗаявление,Документы.ДополнительныеДокументы.ДокументОПроживании);
    ОчиститьПоКлассуЗаписи (локЗаявление,Документы.ДополнительныеДокументы.СвидетельствоОРождении);
    ОчиститьПоКлассуЗаписи (локЗаявление,Документы.ДополнительныеДокументы.Справка);
    ОчиститьПоКлассуЗаписи (локЗаявление,Документы.ДополнительныеДокументы.УдостоверениеЛичности);
  end;


inclass private


  proc ОчиститьПоКлассуЗаписи (локЗаявление: Документы.Заявление; локКлассЗаписи : Class Record);
    var Q: Query;
    Q = Query.Create([локКлассЗаписи]);
    Q.Filter = "Заявление=" + Str(локЗаявление);
    if not Q.RecordsExists:
      return;
    fi;
    Q.Select;
    СИС2.ФункцииДокумента.DeleteAllRecords(Q);
  end;



inclass public

--{ Вспомогательные методы и переменные для редактора заявления

--@doc Возвращает массив из 3-х строк; фамилия, имя, отчество сотрудника в именительном падеже
func ФамилияИмяОтчество_Им(локСотрудник : Базовый.Данные.Субъект; НаДату : date = Today) : string[] ;
  var локСубъект : Базовый.Данные.Субъект;
    Result = nil;
    Result[1] = '';
    Result[2] = '';
    Result[3] = '';
    if (локСотрудник <> nil) :
      локСубъект = локСотрудник.ФизЛицо;
      Result[1] = Базовый.ФункцииСубъекта.Фамилия_НаДату(локСубъект,НаДату,фсИменительныйЕдин);
      Result[2] = Базовый.ФункцииСубъекта.Имя_НаДату(локСубъект,НаДату,фсИменительныйЕдин);
      Result[3] = Базовый.ФункцииСубъекта.Отчество_НаДату(локСубъект,НаДату,фсИменительныйЕдин);
    fi;
end;

func ФамилияИмяОтчество_Род(локСотрудник : Базовый.Данные.Субъект; НаДату : date = Today) : string[] ;
  var локСубъект : Базовый.Данные.Субъект;
    Result = nil;
    Result[1] = '';
    Result[2] = '';
    Result[3] = '';
    if (локСотрудник <> nil) :
      локСубъект = локСотрудник.ФизЛицо;
      Result[1] = Базовый.ФункцииСубъекта.Фамилия_НаДату(локСубъект,НаДату,фсРодительныйЕдин);
      Result[2] = Базовый.ФункцииСубъекта.Имя_НаДату(локСубъект,НаДату,фсРодительныйЕдин);
      Result[3] = Базовый.ФункцииСубъекта.Отчество_НаДату(локСубъект,НаДату,фсРодительныйЕдин);
    fi;
end;




--}

end