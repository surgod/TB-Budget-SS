class inherited ћашина–еквизитов.Ѕазовые.инт«апись "»нтерфейс за€влени€";

import classes  онстанты,‘ункцииѕервичныхƒокументов;
import —»—2 classes  онстанты,‘ункции–““»,‘ункцииƒокумента;

inclass public

  proc »нициализировать»нтерфейс synonym InitInterface;
    var локћетод : MethodInfo;
    var локѕолн»м€ : string;
      inherited InitInterface;
      локѕолн»м€ = "Ѕюджет_—оц—трах.ƒокументы.инт«а€вление.ѕроверка–еестровѕеред”далением";
      локћетод = ѕолучить»нфоћетодаѕоѕолному»менићетода(локѕолн»м€);
      —обытиеѕеред”далением.AddMethod(локћетод);
      локѕолн»м€ = "Ѕюджет_—оц—трах.ƒокументы.инт«а€вление.ќчиститьЅольничныеЋистыѕеред”далением";
      локћетод = ѕолучить»нфоћетодаѕоѕолному»менићетода(локѕолн»м€);
      —обытиеѕеред”далением.AddMethod(локћетод);
      локѕолн»м€ = "Ѕюджет_—оц—трах.ƒокументы.инт«а€вление.ќчиститьƒопƒокументыѕеред”далением";
      локћетод = ѕолучить»нфоћетодаѕоѕолному»менићетода(локѕолн»м€);
      —обытиеѕеред”далением.AddMethod(локћетод);
  end;


  func —в€занный ласс«аписей: class —»—2.Ѕазова€.Ѕазова€«апись;
    Result = ƒокументы.ѕервичные.«а€вление;
  end;

  func Create: ƒокументы.инт«а€вление;
    Result = inherited Create;
    Result.Record = ƒокументы.ѕервичные.«а€вление.Create;
  end;

  func ќткрытьѕо«аписи synonym OpenRecord (locRecord: ƒокументы.ѕервичные.«а€вление): ƒокументы.инт«а€вление;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func Ѕланк–едакторѕо”молчанию: class BlankForm;
    Result = ƒокументы.–ед«а€вление;
  end;

  func  артотекаѕо”молчанию: class CardForm;
    Result = ƒокументы.ѕервичные.карт«а€вление;
  end;

  func ѕроверка–еестровѕеред”далением (локѕарам: variant[]): logical;
    var Q: Query;
    var лок«а€вление: ƒокументы.ѕервичные.«а€вление;
    Result = nil;
    лок«а€вление = локѕарам[2];
    if (лок«а€вление = nil):
      return;
    fi;
    Q = Query.Create([ƒокументы.ѕозици€–еестра]);
    Q.Filter = "—ведени€=" + Str(лок«а€вление);
    if not Q.RecordsExists:
      return;
    fi;
    Message('«а€вление нельз€ удалить, так как оно включено в реестр');
    return false;
  end;


  func ќчиститьЅольничныеЋистыѕеред”далением (локѕарам: variant[]): logical;
    var Q: Query;
    var лок«а€вление: ƒокументы.ѕервичные.«а€вление;
    Result = nil;
    лок«а€вление = локѕарам[2];
    if (лок«а€вление = nil):
      return;
    fi;
    Q = Query.Create([Ѕюджет_ѕерсонал.ƒокументы. адры.ЅольничныйЋист]);
    Q.Filter = "«а€вление=" + Str(лок«а€вление);
    if not Q.RecordsExists:
      return;
    fi;
    if (Enquiry( , "¬ больничных листах есть ссылки на за€вление. ”далить эти ссылки?", ["ќк","ќтмена"]) = 2):
      return false;
    fi;
    Q.Select;
    while not Q.Eof do
      Q.Current.«а€вление = nil;
      Q.Next;
    end;
  end;



  func ќчиститьƒопƒокументыѕеред”далением (локѕарам: variant[]): logical;
    var лок«а€вление: ƒокументы.ѕервичные.«а€вление;
    Result = nil;
    лок«а€вление = локѕарам[2];
    if (лок«а€вление = nil):
      return;
    fi;
    ”далить«а€вление»з лассаƒокументов (лок«а€вление,ƒокументы.ѕервичные.ѕолучатель.јдрес);
    ”далить«а€вление»з лассаƒокументов (лок«а€вление,ƒокументы.ѕервичные.ѕолучатель.ƒокументќѕроживании);
    ”далить«а€вление»з лассаƒокументов (лок«а€вление,ƒокументы.ѕервичные.ѕособие.—видетельствоќ–ождении);
    ”далить«а€вление»з лассаƒокументов (лок«а€вление,ƒокументы.ѕервичные.ѕособие.—правка);
    ”далить«а€вление»з лассаƒокументов (лок«а€вление,ƒокументы.ѕервичные.ѕолучатель.”достоверение);
    ”далить«а€вление»з лассаƒокументов (лок«а€вление,ƒокументы.ѕервичные.ѕолучатель.Ѕанк–еквизиты);
  end;


inclass private


  --proc ќчиститьƒопƒокументыѕо лассу«аписи (лок«а€вление: ƒокументы.ѕервичные.«а€вление; лок ласс«аписи : Class Record);
  --  var Q: Query;
  --  Q = Query.Create([лок ласс«аписи]);
  --  Q.Filter = "«а€вление=" + Str(лок«а€вление);
  --  if not Q.RecordsExists:
  --    return;
  --  fi;
  --  Q.Select;
  --  —»—2.‘ункцииƒокумента.DeleteAllRecords(Q);
  --end;



inclass public

--{ ¬спомогательные методы и переменные дл€ редактора за€влени€


 proc јдрес–егистрации_ѕо”молчанию(лок«а€вление: ƒокументы.ѕервичные.«а€вление;
                                   лок—убъект : Ѕазовый.ƒанные.—убъект;
                                   локЌаƒату : date = Today);
   var локјдрес : Ѕазовый.—правочники.јдрес;
   var локјдресƒопƒокум : ƒокументы.ѕервичные.ѕолучатель.јдрес;
   var лок‘ильтр : string;
     локјдрес = “ЅЅ_Ѕазовый.Ѕиблио.ѕолучитьјдрес—убъекта(лок—убъект,локЌаƒату);
     if (локјдрес = nil) :
       ”далить«а€вление»з лассаƒокументов (лок«а€вление,ƒокументы.ѕервичные.ѕолучатель.јдрес);
       return;
     fi;
     лок‘ильтр = '«а€вление=' + Str(лок«а€вление);
     локјдресƒопƒокум = —»—2.‘ункцииƒокумента.QueryRecord(ƒокументы.ѕервичные.ѕолучатель.јдрес,лок‘ильтр);
     if (локјдресƒопƒокум = nil) :
       локјдресƒопƒокум = ƒокументы.ѕервичные.ѕолучатель.јдрес.Create;
     else
       локјдресƒопƒокум.Edit;
     fi;
     локјдресƒопƒокум.«а€вление = лок«а€вление;
     локјдресƒопƒокум.—отрудник = лок—убъект;
     локјдресƒопƒокум.“ипјдреса = “ипјдреса–егистр;
     локјдресƒопƒокум.»ндекс = локјдрес.»ндекс;
     локјдресƒопƒокум.–егион = локјдрес.–егион_—тр;
     локјдресƒопƒокум.–айон = локјдрес.–айон;
     локјдресƒопƒокум.Ќасѕункт = локјдрес.√ород;
     if (локјдресƒопƒокум.Ќасѕункт = "" and  локјдрес.Ќасѕункт <> "") :
       локјдресƒопƒокум.Ќасѕункт = локјдрес.Ќасѕункт;
     elsif (локјдресƒопƒокум.Ќасѕункт <> "" and  локјдрес.Ќасѕункт <> "") :
       локјдресƒопƒокум.Ќасѕункт = локјдресƒопƒокум.Ќасѕункт + " " + локјдрес.Ќасѕункт;
     fi;
     локјдресƒопƒокум.”лица = локјдрес.”лица;
     локјдресƒопƒокум.ƒом = локјдрес.ƒом;
     локјдресƒопƒокум. орпус = локјдрес. орпус;
     локјдресƒопƒокум.—троение = "";
     локјдресƒопƒокум. вартира = локјдрес. вартира;
     локјдресƒопƒокум.Post;
 end;

 func ѕолучитьЅанк–еквизиты(лок«а€вление: ƒокументы.ѕервичные.«а€вление) : ƒокументы.ѕервичные.ѕолучатель.Ѕанк–еквизиты;
   var лок‘ильтр : string;
     лок‘ильтр = '«а€вление=' + Str(лок«а€вление);
     Result = —»—2.‘ункцииƒокумента.QueryRecord(ƒокументы.ѕервичные.ѕолучатель.Ѕанк–еквизиты,лок‘ильтр);
 end;

func ѕолное»м€“ипа–еестра(лок“ип–еестра : integer) : string;
  Result = '';
  if (лок“ип–еестра = “ип–еестраЌѕ_ЅЋ) :
     Result = '–еестр сведений, необходимых дл€ назначени€ и выплаты пособий по '+
              'временной нетрудоспособности,по беременности и родам, единовременного пособи€ ' +
              'женщинам, вставшим на учет в медицинских организаци€х в ранние сроки беременности';
  elsif (лок“ип–еестра = “ип–еестраЌѕ_–ожд) :
     Result = '–еестр сведений, необходимых дл€ назначени€ и выплаты единовременного пособи€ '+
              'при рождении ребенка';
  elsif (лок“ип–еестра = “ип–еестраЌѕ_”ход–еб) :
     Result = '–еестр сведений, необходимых дл€ назначени€ и выплаты ежемес€чного пособи€ '+
              'по уходу за ребенком';
  fi;
end;


--}

end