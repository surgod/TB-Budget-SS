class inherited ћашина–еквизитов.Ѕазовые.инт«апись " опи€ больничного листа дл€ соц.страх.";

inclass public

  func —в€занный ласс«аписей: class —»—2.Ѕазова€.Ѕазова€«апись;
    Result = ƒокументы. адры.ЅольничныйЋист——;
  end;

  func Create: ƒокументы. адры.интЅольничныйЋист——;
    Result = inherited Create;
    Result.Record = ƒокументы. адры.ЅольничныйЋист——.Create;
  end;

  func ќткрытьѕо«аписи synonym OpenRecord (locRecord: ƒокументы. адры.ЅольничныйЋист——): ƒокументы. адры.интЅольничныйЋист——;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func Ѕланк–едакторѕо”молчанию: class BlankForm;
    Result = ƒокументы. адры.редЅольничныйЋист——;
    --Result = nil;
  end;

  func  артотекаѕо”молчанию: class CardForm;
    --Result = nil; --ƒанные.картЅанк–еквизиты;
    Result = nil;
  end;

func ЅольничныйЋистѕо«а€вке(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€) : ƒокументы. адры.ЅольничныйЋист——;
  var лок‘ильтр : string;
    лок‘ильтр = '«а€вкаЌаЌазначениеѕособи€ = ' + Str(лок«а€вка);
    Result = —»—2.‘ункцииƒокумента.QueryRecord(ƒокументы. адры.ЅольничныйЋист——, лок‘ильтр);
end;


inobject public

  Record: ƒокументы. адры.ЅольничныйЋист——;

  proc »нициализироватьѕо”молчанию synonym InitByDefault;
    inherited InitByDefault;
  end;

proc ЌовыйЅольничныйЋист——(локЅольничныйЋист : Ѕюджет_ѕерсонал.ƒокументы. адры.ЅольничныйЋист;
                           лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€);
  »нициализироватьѕо”молчанию;
  Self.Record.«а€вкаЌаЌазначениеѕособи€ = лок«а€вка;
  if (локЅольничныйЋист = nil) :
    return;
  fi;
  Self.Record.Ќаше”чреждение = локЅольничныйЋист.Ќаше”чреждение;
  Self.Record.—отрудник = локЅольничныйЋист.—отрудник;
  Self.Record.ѕервичный = локЅольничныйЋист.ѕервичный;
  Self.Record.ƒубликат = локЅольничныйЋист.ƒубликат;
  Self.Record.ѕродолжение = локЅольничныйЋист.ѕродолжение;
  Self.Record.ƒатаƒок = локЅольничныйЋист.ƒатаƒок;
  Self.Record.Ќомерƒок = локЅольничныйЋист.Ќомерƒок;
  Self.Record. одѕричины = локЅольничныйЋист. одѕричины;
  Self.Record. одѕричиныƒоп = локЅольничныйЋист. одѕричиныƒоп;
  Self.Record. одѕричины»зм = локЅольничныйЋист. одѕричины»зм;

  Self.Record.ƒата1 = локЅольничныйЋист.ƒата1;
  Self.Record.ƒата2 = локЅольничныйЋист.ƒата2;
  Self.Record.Ќомерѕутевки = локЅольничныйЋист.Ќомерѕутевки;

  Self.Record.¬озрастЋет1 = локЅольничныйЋист.¬озрастЋет1;
  Self.Record.¬озрастћес1 = локЅольничныйЋист.¬озрастћес1;
  Self.Record. од–одства1 = локЅольничныйЋист. од–одства1;
  Self.Record.‘ио„—1 = локЅольничныйЋист.‘ио„—1;
  Self.Record.„лен—емьи1 = локЅольничныйЋист.„лен—емьи1;

  Self.Record.¬озрастЋет2 = локЅольничныйЋист.¬озрастЋет2;
  Self.Record.¬озрастћес2 = локЅольничныйЋист.¬озрастћес2;
  Self.Record. од–одства2 = локЅольничныйЋист. од–одства2;
  Self.Record.‘ио„—2 = локЅольничныйЋист.‘ио„—2;
  Self.Record.„лен—емьи2 = локЅольничныйЋист.„лен—емьи2;

  Self.Record.Ќа”чете–—Ѕ = локЅольничныйЋист.Ќа”чете–—Ѕ;

  Self.Record. одЌарушени€–ежима = локЅольничныйЋист. одЌарушени€–ежима;
  Self.Record.ƒатаЌарушени€–ежима = локЅольничныйЋист.ƒатаЌарушени€–ежима;

  Self.Record.ƒата—тационар1 = локЅольничныйЋист.ƒатаЌарушени€–ежима;
  Self.Record.ƒата—тационар2 = локЅольничныйЋист.ƒата—тационар2;

  Self.Record.√руппа»нв = локЅольничныйЋист.√руппа»нв;

  Self.Record.ƒатаЌачала = локЅольничныйЋист.ƒатаЌачала;
  Self.Record.ƒатаќкончани€ = локЅольничныйЋист.ƒатаќкончани€;
  Self.Record.ƒней¬сегоЅолезни = локЅольничныйЋист.ƒней¬сегоЅолезни;
  Self.Record. од¬ремени = локЅольничныйЋист. од¬ремени;

  Self.Record. од»ногоќкончани€ = локЅольничныйЋист. од»ногоќкончани€;
  Self.Record.ƒата»ногоќкончани€ = локЅольничныйЋист.ƒата»ногоќкончани€;

  Self.Record. од”словий»счислени€1 = локЅольничныйЋист. од”словий»счислени€1;
  Self.Record. од”словий»счислени€2 = локЅольничныйЋист. од”словий»счислени€2;
  Self.Record. од”словий»счислени€3 = локЅольничныйЋист. од”словий»счислени€3;

  Self.Record.ƒатајктЌ1 = локЅольничныйЋист.ƒатајктЌ1;

  Self.Record.—таховой—тажЋет = локЅольничныйЋист.—таховой—тажЋет;
  Self.Record.—таховой—тажћес = локЅольничныйЋист.—таховой—тажћес;
  Self.Record.ЌестраховойѕериодЋет = локЅольничныйЋист.ЌестраховойѕериодЋет;
  Self.Record.Ќестраховойѕериодћес = локЅольничныйЋист.Ќестраховойѕериодћес;
  Self.Record.ƒатаЌачалаќплаты = локЅольничныйЋист.ƒатаЌачалаќплаты;
  Self.Record.ƒатаќкончани€ќплаты = локЅольничныйЋист.ƒатаќкончани€ќплаты;

  Self.Record.Post;
end;

--пол€ дл€ реестра

func ‘ормаЅЋ_ѕечать :string;
  return if (Self.Record.ЁтоЁЋЌ : 'Ёлектронный листок нетрудоспособностиь', 'Ћисток нетрудоспособности' );
end;





func ѕолеѕо»мени(лок»м€ѕол€ : string) : variant;
  return Self.Record.GetField(лок»м€ѕол€);
end;




end