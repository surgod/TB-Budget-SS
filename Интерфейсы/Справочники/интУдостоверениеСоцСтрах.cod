class inherited Ѕазовый.—правочники.инт”достоверение "»нтерфейс удостоверени€ дл€ соц.страх.";

import classes  онстанты;


inclass public

  func —в€занный ласс«аписей: class —»—2.Ѕазова€.Ѕазова€«апись;
    Result = Ѕазовый.—правочники.”достоверение;
  end;

  func Create: —правочники.инт”достоверение—оц—трах;
    Result = inherited Create;
    Result.Record = Ѕазовый.—правочники.”достоверение.Create;
  end;

  func ќткрытьѕо«аписи synonym OpenRecord (locRecord: Ѕазовый.—правочники.”достоверение): —правочники.инт”достоверение—оц—трах;
    Result = inherited Create;
    Result.Record = locRecord;
  end;

  func Ѕланк–едакторѕо”молчанию: class BlankForm;
    Result = —правочники.ред”достоверение—оц—трах;
  end;

  func  артотекаѕо”молчанию: class CardForm;
    Result = —правочники.карт”достоверение—оц—трах;
  end;

----------------------------------------------------------------------------
--только дл€ соц.страх.

proc ”дЋичностиѕо”мол (лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€);
  var лок”достоверение‘Ћ : Ѕазовый.—правочники.”достоверение;
  var лок‘изЋицо : Ѕазовый.ƒанные.—убъект;
  var лок»нт : —правочники.инт”достоверение—оц—трах;
    лок‘изЋицо = лок«а€вка.—отрудник.‘изЋицо;
    лок”достоверение‘Ћ = “ЅЅ_Ѕазовый.Ѕиблио.ѕолучитьƒокумент—убъекта(лок‘изЋицо,Today);
    if (лок”достоверение‘Ћ <> nil) :
      лок»нт = —оздать опиюƒл€«а€вки»“ипа(лок”достоверение‘Ћ,лок«а€вка,“ипƒокѕолуч”дЋичн);
      лок»нт.Record.Post;
    fi;
end;

--@doc возвращает интерыейс дл€ новой записи, созданной копированием локјдрес
func —оздать опиюƒл€«а€вки»“ипа(лок”достоверение : Ѕазовый.—правочники.”достоверение;
                                лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€;
                                лок“ипƒокумента : integer) : —правочники.инт”достоверение—оц—трах;
  Result = inherited Create;
  Result.Record = лок”достоверение.Clone;
  Result.»нициализироватьѕо«а€вке»“ипу(лок«а€вка,лок“ипƒокумента);
end;

func —оздатьѕо«а€вке»“ипу(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€;
                          лок“ипƒокумента : integer) : —правочники.инт”достоверение—оц—трах;
  Result = inherited Create;
  Result.Record = Ѕазовый.—правочники.”достоверение.Create;
  Result.»нициализироватьѕо«а€вке»“ипу(лок«а€вка,лок“ипƒокумента);
end;




func ”дЋичностиѕо«а€вке(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€) : Ѕазовый.—правочники.”достоверение;
  var лок‘ильтр : string;
  var aTxt: string[];
    aTxt[1] = '«а€вкаЌаЌазначениеѕособи€ = ' + Str(лок«а€вка);
    aTxt[2] = '“ипƒокумента—оц—трах' + Str(“ипƒокѕолуч”дЋичн);
    лок‘ильтр = —»—2.—троковые‘ункции.—ложить—троки‘ильтраѕо»(aTxt);
    Result = —»—2.‘ункцииƒокумента.QueryRecord(Ѕазовый.—правочники.”достоверение, лок‘ильтр);
end;

func ƒокумќѕрживанииѕо«а€вке(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€) : Ѕазовый.—правочники.”достоверение;
  var лок‘ильтр : string;
  var aTxt: string[];
    aTxt[1] = '«а€вкаЌаЌазначениеѕособи€ = ' + Str(лок«а€вка);
    aTxt[2] = '“ипƒокумента—оц—трах' + Str(“ипƒокѕолучѕрожив);
    лок‘ильтр = —»—2.—троковые‘ункции.—ложить—троки‘ильтраѕо»(aTxt);
    Result = —»—2.‘ункцииƒокумента.QueryRecord(Ѕазовый.—правочники.”достоверение, лок‘ильтр);
end;

func ѕолеѕо»мени(лок”достоверение : Ѕазовый.—правочники.”достоверение; лок»м€ѕол€ : string) : variant;
  Result = nil;
  if (лок”достоверение = nil) :
    return nil;
  fi;
  if (лок»м€ѕол€ = '¬идƒокумента') :
    if (лок”достоверение.¬идƒокумента = nil) :
      return '';
    else
      return лок”достоверение.¬идƒокумента.»м€;
    fi;
  else
    return  лок”достоверение.GetField(лок»м€ѕол€);
  fi;
end;


inobject public

  Record: Ѕазовый.—правочники.”достоверение;

  --@doc ѕри создании новой записи
proc »нициализироватьѕо”молчанию synonym InitByDefault;
  inherited InitByDefault;
end;

proc »нициализироватьѕо«а€вке»“ипу(лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€;
                                   лок“ипƒокумента : integer);
  var локѕараметры[2] : variant;
    локѕараметры = nil;
    локѕараметры[1] = ['«а€вкаЌаЌазначениеѕособи€',лок«а€вка];
    локѕараметры[2] = ['ѕолучатель‘изЋицо',лок«а€вка.—отрудник.‘изЋицо];
    локѕараметры[3] = ['—убъект',nil];
    локѕараметры[4] = ['“ипƒокумента—оц—трах',лок“ипƒокумента];
    ”становитьѕараметрыЌовой«аписи (локѕараметры);
    »нициализироватьѕо”молчанию;
end;


end