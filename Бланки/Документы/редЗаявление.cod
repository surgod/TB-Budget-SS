class inherited ТББ_Базовый.Базовые.БазовыйБланкДокумент "Заявление об оплате пособия соц.страх.", editor Документы.Первичные.Заявление;


import classes Документы.интЗаявление,Константы;
import СИС2 classes Константы;


inobject private


type типРежимаЭкран = (типЭкранВвод = 0, типЭкранФорма);


var РежимВыводаНаЭкран : integer;


--фреймы


var фреймДокумент : TemplateFrame;
var фреймВвод : TemplateFrame;
var фреймФормаДляПечати : TemplateFrame;
var фреймВводЗаголовка : TemplateFrame;
var фреймПолучатель : TemplateFrame;
var фреймПособия : TemplateFrame;
var фреймОплата : TemplateFrame;
var фреймЗаключение : TemplateFrame;



var фреймЭкран : TemplateFrame;
var фреймШаблоныФормы : TemplateFrame;
var фреймШаблоныВвода : TemplateFrame;
var фреймПечать : TemplateFrame;
var фреймФормаДокумента : TemplateFrame;

--var РеквизитыЗаявления : Документы.РеквизитыЗаявления;
var Получатель : Документы.Получатель;
--var Пособия[]  : Документы.ПособиеСоцСтрах;


--------------------------------------------------------------------------------
--{ Обработчики событий бланка


proc шаблон_ПриСчитывании;
  inherited шаблон_ПриСчитывании;
  СоздатьПолучателя;
  if (not ДопДокументыПоУмолчанию) :
    if (EnqYesNoCancel('Заполнить адрес и документы получателя пособия по карточке сотрудника?') = кмдДа ) :
      EditorPost;
      Получатель.ЗаполнитьАдресаПоУмолчанию;
      --документы по умол
    fi;
    ДопДокументыПоУмолчанию = true;
    EditorPost;
  fi;
  --ПрочитатьПособия;
  РежимВыводаНаЭкран = типЭкранВвод;
  ВидФормы;
end;


func ПолеТипРеестра_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): string;
  Result = '';
  if (Cell.Contents = 'ИмяТипаРеестра') :
    return ПолноеИмяТипаРеестра(ТипРеестра);
  fi;
end;

func ПолеРежим_ПриВыводе(Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
  var locrow : integer;
  var locsect : TemplateSection;
  locrow = Cell.Row;
  locsect = Cell.Owner;
  if (Cell.Contents = 'РежимЭкрана'):
    if (locsect.Row[locrow].Name = "стр_Режим_ввод") and (РежимВыводаНаЭкран = типЭкранВвод):
      Cell.Caption = 'l';
    elsif (locsect.Row[locrow].Name = "стр_Режим_Форма") and (РежимВыводаНаЭкран = типЭкранФорма):
      Cell.Caption = 'l';
    else
      Cell.Caption = '';
    fi;
  fi;
end;

proc ПолеРежим_ПриРисовании (Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
  var locrow : integer;
  var locsect : TemplateSection;
  locrow = Cell.Row;
  locsect = Cell.Owner;
  if (Cell.Contents = 'РежимЭкрана'):
    if (locsect.Row[locrow].Name = "стр_Режим_ввод") and (РежимВыводаНаЭкран = типЭкранВвод):
      Font.Bold = true;
    elsif (locsect.Row[locrow].Name = "стр_Режим_Форма") and (РежимВыводаНаЭкран = типЭкранФорма):
      Font.Bold = true;
    else
      Font.Bold = false;
    fi;
  fi;
end;

func ПолеРежим_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
  var locrow: integer;
  var locsect : TemplateSection;
  locrow = Cell.Row;
  locsect = Cell.Owner;
  if (Cell.Contents = 'РежимЭкрана'):
    if (locsect.Row[locrow].Name = "стр_Режим_ввод") and (РежимВыводаНаЭкран = типЭкранФорма):
      РежимВыводаНаЭкран = типЭкранВвод;
      ВидФормы;
    elsif (locsect.Row[locrow].Name = "стр_Режим_Форма") and (РежимВыводаНаЭкран = типЭкранВвод):
      РежимВыводаНаЭкран = типЭкранФорма;
      ВидФормы;
    fi;
  fi;

end;

--}



--{ Вспомогательные методы

proc СоздатьРеквизитыЗаявления;
  --РеквизитыЗаявления = Документы.РеквизитыЗаявления.СоздатьПоЗаписиЗаявления (Self.Record);
end;

proc СоздатьПолучателя;
  Получатель = Документы.Получатель.СоздатьПоЗаписиЗаявления (Self.Record);
end;

proc ВидФормы;
  Template.BeginModify;
    if (РежимВыводаНаЭкран = типЭкранВвод) :
      Template.CurrentFrame = фреймПолучатель;
    elsif (РежимВыводаНаЭкран = типЭкранФорма) :
      НарисоватьФормуДляПечати;
      Template.CurrentFrame = фреймФормаДляПечати;
    fi;
    фреймДокумент.ShowTabs = false;
  Template.EndModify;
end;


proc НарисоватьФормуДляПечати;
  ЗаполнитьШапкуЗаявления;
  ЗаполнитьБанкРеквизиты;
  ЗаполнитьФИОРожд;
end;


proc ЗаполнитьШапкуЗаявления;
  var локТаблица : storage;
    локТаблица  = СоздатьТалицуПоИмениСекции('секцШапка');
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Шапка_Фсс_Н','стр_Шапка_Фсс_К']);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Шапка_Н','стб_Шапка_К']);
    ТекстВСекциюПоКлеткам(НаимТОФСС,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Шапка_Фам','стр_Шапка_Фам']);
    ТекстВСекциюПоКлеткам(ФамилияЗаявителя_Род,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Шапка_Имя','стр_Шапка_Имя']);
    ТекстВСекциюПоКлеткам(ИмяЗаявителя_Род,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Шапка_Отч','стр_Шапка_Отч']);
    ТекстВСекциюПоКлеткам(ОтчествоЗаявителя_Род,локТаблица);
end;

proc ЗаполнитьБанкРеквизиты;
  var локБанкРекв : Документы.БанкРеквизитыПолучателя;
  var локТаблица : storage;
  var ss,ss1,ss2,ss3,ss4  : string;
  var i,j,nn : integer;
    локБанкРекв = Получатель.БанкРеквизитыПолучателя;
    локТаблица  = СоздатьТалицуПоИмениСекции('секцБанк');
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Банк_Наим_С','стр_Банк_Наим_По']);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Наим_С','стб_Банк_Наим_С']);
    ТекстВСекциюПоКлеткам(локБанкРекв.БанкНаим,локТаблица);
    nn = 5;
    ss1 = локБанкРекв.СчетПолучателя;
    if (ss1 <> '') :
      ss = Substr(ss1,1,nn) + '-' + Substr(ss1,nn + 1,nn) + '-' + Substr(ss1,2*nn + 1,nn) + '-' +
           Substr(ss1,3*nn + 1,nn);
    else
      ss = RepStr('     -',3) + '     ';
    fi;
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Банк_Cчет','стр_Банк_Cчет']);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Наим_С','стб_Банк_Счет_По']);
    ТекстВСекциюПоКлеткам(ss,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Банк_БИК','стр_Банк_БИК']);
    ss = if(локБанкРекв <> nil : локБанкРекв.БИК ,'');
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Наим_С','стб_Банк_БИК_По']);
    ТекстВСекциюПоКлеткам(ss,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Банк_Карта','стр_Банк_Карта']);
    ss = if(локБанкРекв <> nil : локБанкРекв.НомерКарты ,'');
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Наим_С','стб_Банк_Счеn4_С']);
    ТекстВСекциюПоКлеткам(ss,локТаблица);
end;


proc ЗаполнитьФИОРожд;
  var локТаблица : storage;
  var ss : string;
    локТаблица  = СоздатьТалицуПоИмениСекции('секцФИО_Рожд');
    ИзменитьСтрокиТаблицы(локТаблица,['стр_ФИОРожд_Фам','стр_ФИОРожд_Фам']);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_ФИОРожд_Фам_С','стб_ФИОРожд_Фам_По']);
    ТекстВСекциюПоКлеткам(Фамилия,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_ФИОРожд_Имя','стр_ФИОРожд_Имя']);
    ТекстВСекциюПоКлеткам(Имя,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_ФИОРожд_Отч','стр_ФИОРожд_Отч']);
    ТекстВСекциюПоКлеткам(Отчество,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_ФИОРожд_Дата','стр_ФИОРожд_Дата']);
    ss = if(ДатаРождения = nil : '  .  .    ', Str(ДатаРождения));
    локТаблица.Столбец_По = локТаблица.Столбец_С + Length(ss) - 1;
    ТекстВСекциюПоКлеткам(ss,локТаблица);
end;



--@doc Возвращает хранилищц со следующими полями:
--@doc Cекция - секция с именем локИмяСекции
--@doc Строка_С, Строка_По - границы таблицы по строкам внутри секции Cекция (пока = 0)
--@doc Столбец_С, Столбец_По - границы таблицы по столбцам внутри секции Cекция (пока = 0)
func СоздатьТалицуПоИмениСекции(локИмяСекции : string) : storage;
  var локСекц : TemplateSection;
    Result = Storage.Create;
    локСекц = СекцияПоИмени(локИмяСекции,фреймФормаДляПечати);
    Result.Секция = локСекц;
    Result.Строка_С = 0;
    Result.Строка_По = 0;
    Result.Столбец_С = 0;
    Result.Столбец_По = 0;
end;

--@doc Записываются  в локТаблица Строка_С, Строка_По
proc ИзменитьСтрокиТаблицы(var локТаблица : storage; локИменаСтрок[] : string);
  var nstr[] : integer;
    if (локТаблица.Секция = nil) :
      return;
    fi;
    локТаблица.Строка_С = 0;
    локТаблица.Строка_По = 0;
    nstr = НомераСтрокПоИменам(локТаблица.Секция,локИменаСтрок);
    if (0 in nstr) :
      return;
    fi;
    локТаблица.Строка_С = nstr[1];
    локТаблица.Строка_По = nstr[2];
end;

--@doc Записываются в локТаблица Столбец_С, Столбец_По
proc ИзменитьСтолбцыТаблицы(var локТаблица : storage; локИменаСтолбцов[] : string);
  var nstb[] : integer;
    if (локТаблица.Секция = nil) :
      return;
    fi;
    локТаблица.Столбец_С = 0;
    локТаблица.Столбец_По = 0;
    nstb = НомераСтолбцовПоИменам(локТаблица.Секция,локИменаСтолбцов);
    if (0 in nstb) :
      return;
    fi;
    локТаблица.Столбец_С = nstb[1];
    локТаблица.Столбец_По = nstb[2];
end;

--@doc Текст записывается в секцию по 1 символу в клетк
--@doc Секция и границы определены в локТаблица
proc ТекстВСекциюПоКлеткам(локТекст : string; локТаблица : storage);
  var локСекц : TemplateSection;
  var i, j, nn : integer;
  var ss,ss1: string;
    if (локТаблица.Секция = nil) :
      return;
    fi;
    if (локТаблица.Строка_С = 0 or локТаблица.Строка_По = 0) :
      return;
    fi;
    if (локТаблица.Столбец_С = 0 or локТаблица.Столбец_По = 0) :
      return;
    fi;
    локСекц = локТаблица.Секция;
    nn = 0;
    ss = Up(локТекст);
    for i = локТаблица.Строка_С..локТаблица.Строка_По do
      for j = локТаблица.Столбец_С..локТаблица.Столбец_По do
        nn = nn + 1;
        if (Length(ss) < nn) :
          ss1 = '';
        else
          ss1 = Substr(ss,nn,1);
        fi;
        локСекц.Cell[j,i].Contents = ss1;
      end;
    end;
end;



--}

func Поле_ПриВыводе_ЗаголовокОкнаФормы (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
  var aTxt: string[];
  with СИС2.СтроковыеФункции  do
    aTxt[1] = MarkInGray(НашеУчреждение.Наим);
    aTxt[2] = 'Заявление на оплату пособия соц. страх. N '+НомерБум;
    if (Дата <> nil) :
      aTxt[2] = aTxt[2] + ' от '+Str(Дата);
    fi;
    if (Субъект <> nil) :
      aTxt[3] = MarkInGray(Субъект.Имя);
    else
      aTxt[3] = '<s-><s->' ;
    fi;
    Return МассивСтрокВТекст(aTxt);
  end;
end;





end