class inherited ТББ_Базовый.Базовые.БазовыйБланкДокумент "Заявление об оплате пособия соц.страх.", editor Документы.Первичные.Заявление;


import classes Документы.интЗаявление,Константы;
import СИС2 classes Константы;


inobject private


type типРежимаЭкран = (типЭкранФорма = 0, типЭкранРекв, типЭкранПолуч, типЭкранПособ);


var РежимВыводаНаЭкран : integer;


--фреймы

var фреймЭкран : TemplateFrame;
var фреймШаблоныФормы : TemplateFrame;
var фреймШаблоныВвода : TemplateFrame;
var фреймПечать : TemplateFrame;
var фреймФормаДокумента : TemplateFrame;

var РеквизитыЗаявления : Документы.РеквизитыЗаявления;
var Получатель : Документы.Получатель;
--var Пособия[]  : Документы.ПособиеСоцСтрах;


--------------------------------------------------------------------------------
--{ Обработчики событий бланка


proc шаблон_ПриСчитывании;
  inherited шаблон_ПриСчитывании;
  --СоздатьРеквизитыЗаявления;
  СоздатьПолучателя;
  --ПрочитатьПособия;
  РежимВыводаНаЭкран = типЭкранФорма;
  ВидФормы;
end;


proc ПолеСубъект_ПриВыходе(Cell: TemplateCell; Index: Integer);
   Получатель.ЗаполнитьПоУмолчанию;
   ПрочитатьПолучателя;
   ВидФормы;
end;

func ПолеТипРеестра_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): string;
  Result = '';
  if (Cell.Contents = 'ИмяТипаРеестра') :
    return ПолноеИмяТипаРеестра(ТипРеестра);
  fi;
end;



 proc кнОбновить_ПриНажатии(B1: Button);
   --РеквизитыЗаявления.ЗаполнитьПоУмолчанию;
   Получатель.ЗаполнитьПоУмолчанию;
   ПрочитатьРеквизитыЗаявления;
   ПрочитатьПолучателя;
   ВидФормы;
 end;

 proc кнФорма_ПриНажатии(B1: Button);
   РежимВыводаНаЭкран = типЭкранФорма;
   ВидФормы;
 end;

 proc кнРеквизиты_ПриНажатии(B1: Button);
   РежимВыводаНаЭкран = типЭкранРекв;
   ВидФормы;
 end;

 proc кнПолучатель_ПриНажатии(B1: Button);
   РежимВыводаНаЭкран = типЭкранПолуч;
   ВидФормы;
 end;

 proc кнПособия_ПриНажатии(B1: Button);
   РежимВыводаНаЭкран = типЭкранПособ;
   ВидФормы;
 end;


--}



--{ Вспомогательные методы

proc СоздатьРеквизитыЗаявления;
  --РеквизитыЗаявления = Документы.РеквизитыЗаявления.СоздатьПоЗаписиЗаявления (Self.Record);
end;

proc СоздатьПолучателя;
  Получатель = Документы.Получатель.СоздатьПоЗаписиЗаявления (Self.Record);
end;

proc ВидФормы;
  Template.BeginModify;
    if (РежимВыводаНаЭкран = типЭкранФорма) :
      ФормаНаЭкран;
    elsif (РежимВыводаНаЭкран = типЭкранРекв) :
      РеквизитыЗаявленияНаЭкран;
    elsif (РежимВыводаНаЭкран = типЭкранПолуч) :
      СведенияОПолучателеНаЭкран;
    elsif (РежимВыводаНаЭкран = типЭкранПособ) :
      ПособияНаЭкран;
    fi;
    фреймФормаДокумента.ShowTabs = false;
  Template.EndModify;
end;

proc ПрочитатьРеквизитыЗаявления;
  --ПолноеИмяУчреждения = РеквизитыЗаявления.ПолноеИмяУчреждения;
  --НаимТОФСС = РеквизитыЗаявления.НаимТОФСС;
  --ФамилияЗаявителя_Род = РеквизитыЗаявления.ФамилияЗаявителя_Род;
  --ИмяЗаявителя_Род = РеквизитыЗаявления.ИмяЗаявителя_Род;
  --ОтчествоЗаявителя_Род = РеквизитыЗаявления.ОтчествоЗаявителя_Род;
end;

proc ПрочитатьПолучателя;
  Фамилия = Получатель.Фамилия;
  Имя  = Получатель.Имя;
  Отчество = Получатель.Отчество;
  ДатаРождения = Получатель.ДатаРождения;
  Телефон = Получатель.Телефон;
end;

proc ФормаНаЭкран;
  ЗаполнитьШаблоныСекций;
  СекцииФормыНаЭкран;
end;

proc РеквизитыЗаявленияНаЭкран;
  УдалитьВсеСекции(фреймЭкран);
  КлонироватьСекцию(фреймЭкран,'секцРеквизиты',фреймШаблоныВвода);
end;

proc СведенияОПолучателеНаЭкран;
end;

proc ПособияНаЭкран;
end;


proc ЗаполнитьШаблоныСекций;
  ЗаполнитьШапку;
  ЗаполнитьБанкРеквизиты;
  ЗаполнитьФИОРожд;
end;


proc ЗаполнитьШапку;
  var локТаблица : storage;
    локТаблица  = СоздатьТалицуПоИмениСекции('секцШапка');
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Шапка_Фсс_Н','стр_Шапка_Фсс_К']);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Шапка_Н','стб_Шапка_К']);
    ТекстВСекциюПоКлеткам(НаимТОФСС,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Шапка_Фам','стр_Шапка_Фам']);
    ТекстВСекциюПоКлеткам(ФамилияЗаявителя_Род,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Шапка_Имя','стр_Шапка_Имя']);
    ТекстВСекциюПоКлеткам(ИмяЗаявителя_Род,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Шапка_Отч','стр_Шапка_Отч']);
    ТекстВСекциюПоКлеткам(ОтчествоЗаявителя_Род,локТаблица);
end;

proc ЗаполнитьБанкРеквизиты;
  var локБанкРекв : Документы.Первичные.Получатель.БанкРеквизиты;
  var локТаблица : storage;
  var ss,ss1  : string;
  var nn : integer;
    локБанкРекв = ПолучитьБанкРеквизиты(Self.Record);
    локТаблица  = СоздатьТалицуПоИмениСекции('секцБанк');
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Банк_Наим_С','стр_Банк_Наим_По']);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Наим_С','стб_Банк_Наим_С']);
    ss = if(локБанкРекв <> nil : локБанкРекв.БанкНаим, '');
    ТекстВСекциюПоКлеткам(ss,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Банк_Cчет','стр_Банк_Cчет']);
    ss = if(локБанкРекв <> nil : локБанкРекв.СчетПолучателя ,'');
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Наим_С','стб_Банк_Счет1_По']);
    nn = локТаблица.Столбец_По - локТаблица.Столбец_С +1;
    ss1 = if(Length(ss) <=  nn : ss, Substr(ss,1,nn));
    ss = if(Length(ss) <=  nn : '', Substr(ss, nn+1, Length(ss) - nn));
    ТекстВСекциюПоКлеткам(ss1,локТаблица);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Счеn2_С','стб_Банк_Счеn2_По']);
    nn = локТаблица.Столбец_По - локТаблица.Столбец_С +1;
    ss1 = if(Length(ss) <=  nn : ss, Substr(ss,1,nn));
    ss = if(Length(ss) <=  nn : '', Substr(ss, nn+1, Length(ss) - nn));
    ТекстВСекциюПоКлеткам(ss1,локТаблица);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Счеn3_С','стб_Банк_Счеn3_По']);
    nn = локТаблица.Столбец_По - локТаблица.Столбец_С +1;
    ss1 = if(Length(ss) <=  nn : ss, Substr(ss,1,nn));
    ss = if(Length(ss) <=  nn : '', Substr(ss, nn+1, Length(ss) - nn));
    ТекстВСекциюПоКлеткам(ss1,локТаблица);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Счеn4_С','стб_Банк_Счеn4_По']);
    ТекстВСекциюПоКлеткам(ss,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Банк_БИК','стр_Банк_БИК']);
    ss = if(локБанкРекв <> nil : локБанкРекв.БИК ,'');
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Наим_С','стб_Банк_БИК_По']);
    ТекстВСекциюПоКлеткам(ss,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_Банк_Карта','стр_Банк_Карта']);
    ss = if(локБанкРекв <> nil : локБанкРекв.НомерКарты ,'');
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_Банк_Наим_С','стб_Банк_Счеn4_С']);
    ТекстВСекциюПоКлеткам(ss,локТаблица);
end;

proc ЗаполнитьФИОРожд;
  var локТаблица : storage;
    локТаблица  = СоздатьТалицуПоИмениСекции('секцФИО_Рожд');
    ИзменитьСтрокиТаблицы(локТаблица,['стр_ФИОРожд_Фам','стр_ФИОРожд_Фам']);
    ИзменитьСтолбцыТаблицы(локТаблица,['стб_ФИОРожд_Фам_С','стб_ФИОРожд_Фам_По']);
    ТекстВСекциюПоКлеткам(Фамилия,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_ФИОРожд_Имя','стр_ФИОРожд_Имя']);
    ТекстВСекциюПоКлеткам(Имя,локТаблица);
    ИзменитьСтрокиТаблицы(локТаблица,['стр_ФИОРожд_Отч','стр_ФИОРожд_Отч']);
    ТекстВСекциюПоКлеткам(Отчество,локТаблица);
    локТаблица = СоздатьТалицуДатыПоИмениСекции('секцФИО_Рожд');
    СтрокуИСтолбецВТаблицуДаты(локТаблица,'стр_ФИОРожд_Дата','стб_ФИОРожд_Фам_С');
    ДатуВСекциюПоКлеткам(ДатаРождения,локТаблица);
end;





proc СекцииФормыНаЭкран;
  УдалитьВсеСекции(фреймЭкран);
  КлонироватьСекцию(фреймЭкран,'секцШапка',фреймШаблоныФормы);
  КлонироватьСекцию(фреймЭкран,'секцТекстЗаявления',фреймШаблоныФормы);
  КлонироватьСекцию(фреймЭкран,'секцСписокПособий',фреймШаблоныФормы);
  КлонироватьСекцию(фреймЭкран,'секцСпособОплаты',фреймШаблоныФормы);
  КлонироватьСекцию(фреймЭкран,'секцКоммент_Стр1',фреймШаблоныФормы);
  КлонироватьСекцию(фреймЭкран,'секцБанк',фреймШаблоныФормы);
  КлонироватьСекцию(фреймЭкран,'секцФИО_Рожд',фреймШаблоныФормы);
end;


--@doc Возвращает хранилищц со следующими полями:
--@doc Cекция - секция с именем локИмяСекции
--@doc Строка_С, Строка_По - границы таблицы по строкам внутри секции Cекция (пока = 0)
--@doc Столбец_С, Столбец_По - границы таблицы по столбцам внутри секции Cекция (пока = 0)
func СоздатьТалицуПоИмениСекции(локИмяСекции : string) : storage;
  var локСекц : TemplateSection;
    Result = Storage.Create;
    локСекц = СекцияПоИмени(локИмяСекции,фреймШаблоныФормы);
    Result.Секция = локСекц;
    Result.Строка_С = 0;
    Result.Строка_По = 0;
    Result.Столбец_С = 0;
    Result.Столбец_По = 0;
end;

--@doc Записываются  в локТаблица Строка_С, Строка_По
proc ИзменитьСтрокиТаблицы(var локТаблица : storage; локИменаСтрок[] : string);
  var nstr[] : integer;
    if (локТаблица.Секция = nil) :
      return;
    fi;
    локТаблица.Строка_С = 0;
    локТаблица.Строка_По = 0;
    nstr = НомераСтрокПоИменам(локТаблица.Секция,локИменаСтрок);
    if (0 in nstr) :
      return;
    fi;
    локТаблица.Строка_С = nstr[1];
    локТаблица.Строка_По = nstr[2];
end;

--@doc Записываются в локТаблица Столбец_С, Столбец_По
proc ИзменитьСтолбцыТаблицы(var локТаблица : storage; локИменаСтолбцов[] : string);
  var nstb[] : integer;
    if (локТаблица.Секция = nil) :
      return;
    fi;
    локТаблица.Столбец_С = 0;
    локТаблица.Столбец_По = 0;
    nstb = НомераСтолбцовПоИменам(локТаблица.Секция,локИменаСтолбцов);
    if (0 in nstb) :
      return;
    fi;
    локТаблица.Столбец_С = nstb[1];
    локТаблица.Столбец_По = nstb[2];
end;

--@doc Текст записывается в секцию по 1 символу в клетк
--@doc Секция и границы определены в локТаблица
proc ТекстВСекциюПоКлеткам(локТекст : string; локТаблица : storage);
  var локСекц : TemplateSection;
  var i, j, nn : integer;
  var ss,ss1: string;
    if (локТаблица.Секция = nil) :
      return;
    fi;
    if (локТаблица.Строка_С = 0 or локТаблица.Строка_По = 0) :
      return;
    fi;
    if (локТаблица.Столбец_С = 0 or локТаблица.Столбец_По = 0) :
      return;
    fi;
    локСекц = локТаблица.Секция;
    nn = 0;
    ss = Up(локТекст);
    for i = локТаблица.Строка_С..локТаблица.Строка_По do
      for j = локТаблица.Столбец_С..локТаблица.Столбец_По do
        nn = nn + 1;
        if (Length(ss) < nn) :
          ss1 = '';
        else
          ss1 = Substr(ss,nn,1);
        fi;
        локСекц.Cell[j,i].Contents = ss1;
      end;
    end;

end;

func СоздатьТалицуДатыПоИмениСекции(локИмяСекции : string) : storage;
  var локСекц : TemplateSection;
    Result = Storage.Create;
    локСекц = СекцияПоИмени(локИмяСекции,фреймШаблоныФормы);
    Result.Секция = локСекц;
    Result.Строка = 0;
    Result.Столбец_С = 0;
end;

--@doc Записываются  в локТаблица Строка и  Столбец_С
proc СтрокуИСтолбецВТаблицуДаты(var локТаблица : storage; локИмяСтроки : string; локИмяСтолбца : string);
  var nstr[],nstb[] : integer;
    if (локТаблица.Секция = nil) :
      return;
    fi;
    локТаблица.Строка = 0;
    локТаблица.Столбец_С = 0;
    nstr = НомераСтрокПоИменам(локТаблица.Секция,[локИмяСтроки]);
    if (0 in nstr) :
      return;
    fi;
    локТаблица.Строка = nstr[1];
    nstb = НомераСтолбцовПоИменам(локТаблица.Секция,[локИмяСтолбца]);
    if (0 in nstb) :
      return;
    fi;
    локТаблица.Столбец_С = nstb[1];
end;

proc ДатуВСекциюПоКлеткам(локДата : date; локТаблица : storage);
  var локСекц : TemplateSection;
  var i,j  : integer;
  var ss: string;
    if (локТаблица.Секция = nil) :
      return;
    fi;
    if (локТаблица.Строка = 0) :
      return;
    fi;
    if (локТаблица.Столбец_С = 0) :
      return;
    fi;
    локСекц = локТаблица.Секция;
    i = локТаблица.Строка;
    j = локТаблица.Столбец_С;
    ss = Str(Day(локДата),'0#');
    локСекц.Cell[j,i].Contents = Substr(ss,1,1);
    локСекц.Cell[j+1,i].Contents = Substr(ss,2,1);
    j = j + 3;
    ss = Str(Mon(локДата),'0#');
    локСекц.Cell[j,i].Contents = Substr(ss,1,1);
    локСекц.Cell[j+1,i].Contents = Substr(ss,2,1);
    j = j + 3;
    ss = Str(Year(локДата),'#');
    локСекц.Cell[j,i].Contents = Substr(ss,1,1);
    локСекц.Cell[j+1,i].Contents = Substr(ss,2,1);
    локСекц.Cell[j+2,i].Contents = Substr(ss,3,1);
    локСекц.Cell[j+3,i].Contents = Substr(ss,4,1);
end;


--}

func Поле_ПриВыводе_ЗаголовокОкнаФормы (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
  var aTxt: string[];
  with СИС2.СтроковыеФункции  do
    aTxt[1] = MarkInGray(НашеУчреждение.Наим);
    aTxt[2] = 'Заявление на оплату пособия соц. страх. N '+НомерБум;
    if (Дата <> nil) :
      aTxt[2] = aTxt[2] + ' от '+Str(Дата);
    fi;
    if (Субъект <> nil) :
      aTxt[3] = MarkInGray(Субъект.Имя);
    else
      aTxt[3] = '<s-><s->' ;
    fi;
    Return МассивСтрокВТекст(aTxt);
  end;
end;





end