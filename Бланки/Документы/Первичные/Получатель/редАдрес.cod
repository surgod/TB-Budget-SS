Class inherited —»—2.ЅазовыйЅланк–едактор "–едактор адреса" , editor ƒокументы.ѕервичные.ѕолучатель.јдрес;

import classes  онстанты;

inclass public

type тип–ежим¬ыводаЌаЁкран = (тип–ежим“олько¬ывод = 0, тип–ежим¬вод);


func ѕоказатьћодально synonym ShowModal (лок«а€вление: ƒокументы.ѕервичные.«а€вление;
                                         лок“ипјдреса : integer): integer;
  var locRecord: ƒокументы.ѕервичные.ѕолучатель.јдрес;
  var locForm: ƒокументы.ѕервичные.ѕолучатель.редјдрес;
    locRecord = ѕолучить«аписьјдреса(лок«а€вление,лок“ипјдреса);
    locForm = ƒокументы.ѕервичные.ѕолучатель.редјдрес.Create;
    locForm.–ежим¬ыводаЌаЁкран = тип–ежим¬вод;
    if (CmOk = locForm.ShowEx(locRecord , Kernel.Window.ModalWindow)):
      Return cmOk;
    fi;
end;


  inclass private

  func ѕолучить«аписьјдреса(лок«а€вление: ƒокументы.ѕервичные.«а€вление;
                            лок“ипјдреса : integer)  : ƒокументы.ѕервичные.ѕолучатель.јдрес;
    var aTxt[], лок‘ильтр : string;
      aTxt[1] = '«а€вление =' + Str(лок«а€вление);
      aTxt[2] = '“ипјдреса =' + Str(лок“ипјдреса);
      лок‘ильтр = —»—2.—троковые‘ункции.—ложить—троки‘ильтраѕо»(aTxt);
      Result = —»—2.‘ункцииƒокумента.QueryLastRecord(ƒокументы.ѕервичные.ѕолучатель.јдрес, лок‘ильтр);
      if (Result = nil):
        Result = ƒокументы.ѕервичные.ѕолучатель.јдрес.Create;
        Result.«а€вление = лок«а€вление;
        Result.—отрудник = лок«а€вление.—убъект;
        Result.“ипјдреса = лок“ипјдреса;
        Result.Ќаим = »м€“ипјдреса(лок“ипјдреса);
      fi;
  end;


 inobject private

 var  –ежим¬ыводаЌаЁкран : integer;
 var  —толбцыƒл€¬вода[]  : string;
 var  —толбцыƒл€¬ывода[]  : string;

 var секц—ведени€ : TemplateSection;


--{{ ќбработчики событий шаблона
proc шаблон_ѕри—оздании(Context :Variant);
  inherited шаблон_ѕри—оздании(Context);
  ќбновить—писокѕол€(Template.CellByField['“ипјдреса'], “ипыјдресов);
  –ежим¬ыводаЌаЁкран = тип–ежим“олько¬ывод;
  –азметка—екции;
end;

proc шаблон_ѕриќткрытии(Create :Logical);
  inherited шаблон_ѕриќткрытии(Create);
  ¬ид‘ормы;
end;



--}}

--{{ ќбработчики событий клеток шаблона
--}}

--{{ ќбработчики событий прочих объектов шаблона
--}}

--{{ ƒополнительные команды
--}}

--{{ ¬спомогательные методы
proc –азметка—екции;
  —толбцыƒл€¬вода = nil;
  —толбцыƒл€¬ывода = nil;

  —толбцыƒл€¬вода[1] = 'стб_¬вод1';
  —толбцыƒл€¬вода[2] = 'стб_¬вод2';

  —толбцыƒл€¬ывода[1] = 'стб_¬ывод1';
  —толбцыƒл€¬ывода[2] = 'стб_¬ывод2';

end;

proc ¬ид‘ормы;
  var i : integer;
    Template.BeginModify;
      if (–ежим¬ыводаЌаЁкран = тип–ежим“олько¬ывод) :
        for i = 1..секц—ведени€.ColumnsCount do
          if (секц—ведени€.Column[i].»м€ in —толбцыƒл€¬вода) :
            секц—ведени€.Column[i].Visible = false;
            секц—ведени€.Column[i].Printed = false;
          elsif (секц—ведени€.Column[i].»м€ in —толбцыƒл€¬ывода) :
            секц—ведени€.Column[i].Visible = true;
            секц—ведени€.Column[i].Printed = true;
          fi;
        end;
        кнќк.Enabled = false;
      elsif (–ежим¬ыводаЌаЁкран = тип–ежим¬вод) :
        for i = 1..секц—ведени€.ColumnsCount do
          if (секц—ведени€.Column[i].»м€ in —толбцыƒл€¬вода) :
            секц—ведени€.Column[i].Visible = true;
            секц—ведени€.Column[i].Printed = true;
          elsif (секц—ведени€.Column[i].»м€ in —толбцыƒл€¬ывода) :
            секц—ведени€.Column[i].Visible = false;
            секц—ведени€.Column[i].Printed = false;
          fi;
        end;
        кнќк.Enabled = true;
      fi;
    Template.EndModify;
end;

--}}

func ѕоле_ѕри¬ыводе_«аголовокќкна‘ормы (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
  var aTxt: string[];
  with —»—2.—троковые‘ункции  do
    aTxt[1] = MarkInGray(«а€вление.Ќаше”чреждение.Ќаим);
    aTxt[2] = 'јдрес получател€ пособи€ к за€влениюN '+«а€вление.ЌомерЅум;
    if («а€вление.Ќомер орректировки <> 0) :
      aTxt[2] = aTxt[2] + ' (номер корректировки = ' + Str(«а€вление.Ќомер орректировки) + ')';
    fi;
    if («а€вление.—убъект <> nil) :
      aTxt[3] = MarkInGray(«а€вление.—убъект.»м€);
    else
      aTxt[3] = '<s-><s->' ;
    fi;
    Return ћассив—трок¬“екст(aTxt);
  end;
end;


end