Class inherited СИС2.БазовыйБланкРедактор "Редактор банковских реквизитов для перечисления пособия" , editor Документы.Первичные.Получатель.БанкРеквизиты;

import classes Константы;

inclass public

type типРежимВыводаНаЭкран = (типРежимТолькоВывод = 0, типРежимВвод);


func ПоказатьМодально synonym ShowModal (локЗаявление: Документы.Первичные.Заявление): integer;
  var locRecord: Документы.Первичные.Получатель.БанкРеквизиты;
  var locForm: Документы.Первичные.Получатель.редБанкРеквизиты;
    locRecord = ПолучитьЗаписьБанкРеквизитов(локЗаявление);
    locForm = Документы.Первичные.Получатель.редБанкРеквизиты.Create;
    locForm.РежимВыводаНаЭкран = типРежимВвод;
    if (CmOk = locForm.ShowEx(locRecord , Kernel.Window.ModalWindow)):
      Return cmOk;
    fi;
end;


  inclass private

  func ПолучитьЗаписьБанкРеквизитов(локЗаявление: Документы.Первичные.Заявление)  : Документы.Первичные.Получатель.БанкРеквизиты;
    var локФильтр : string;
      локФильтр = 'Заявление =' + Str(локЗаявление);
      Result = СИС2.ФункцииДокумента.QueryLastRecord(Документы.Первичные.Получатель.БанкРеквизиты, локФильтр);
      if (Result = nil):
        Result = Документы.Первичные.Получатель.БанкРеквизиты.Create;
        Result.Заявление = локЗаявление;
        Result.Сотрудник = локЗаявление.Субъект;
      fi;
  end;


 inobject private

 var  РежимВыводаНаЭкран : integer;

 var секцСведения_Ввод : TemplateSection;
 var секцСведения_Вывод : TemplateSection;

 var Столбец_С : integer;
 var Столбец_Счет_По : integer;
 var Столбец_БИК_По : integer;
 var Столбец_Карта_По : integer;
 var Строка_Наим : integer;
 var Строка_Счет : integer;
 var Строка_БИК : integer;
 var Строка_Карта : integer;

--{{ Обработчики событий шаблона
proc шаблон_ПриСоздании(Context :Variant);
  inherited шаблон_ПриСоздании(Context);
  --ОбновитьСписокПоля(Template.CellByField['ТипАдреса'], ТипыАдресов);
  РежимВыводаНаЭкран = типРежимТолькоВывод;
  РазметкаСекции;
end;

proc шаблон_ПриОткрытии(Create :Logical);
  inherited шаблон_ПриОткрытии(Create);
  ВидФормы;
end;

func Поле_ПриНаборе(Cell: TemplateCell; Key :String; Value :Variant; var NewValue:Variant): Logical;
  if (Cell.Contents = 'СчетПолучателя') :
    ТекстВСекциюПоКлеткам(Value, Строка_Счет, [Столбец_С,Столбец_Счет_По]);
  elsif (Cell.Contents = 'БИК') :
    ТекстВСекциюПоКлеткам(Value, Строка_БИК, [Столбец_С,Столбец_БИК_По]);
  elsif (Cell.Contents = 'НомерКарты') :
    ТекстВСекциюПоКлеткам(Value, Строка_Карта, [Столбец_С,Столбец_Карта_По]);
  fi;
end;


--}}

--{{ Вспомогательные методы

proc РазметкаСекции;
  var локИмена[] : string;
  var локЗначения[] : integer;
    локИмена = ['стр_Вывод_Наим','стр_Вывод_Cчет','стр_Вывод_БИК','стр_Вывод_Карта'];
    локЗначения = НомераСтрокПоИменам(секцСведения_Вывод,локИмена);
    Строка_Наим = локЗначения[1];
    Строка_Счет = локЗначения[2];
    Строка_БИК  = локЗначения[3];
    Строка_Карта  = локЗначения[4];
    локИмена = ['стб_Вывод_С','стб_Вывод_БИК_По','стб_Вывод_Счет_По','стб_Вывод_Карта_По'];
    локЗначения = НомераСтолбцовПоИменам(секцСведения_Вывод,локИмена);
    Столбец_С = локЗначения[1];
    Столбец_Счет_По = локЗначения[2];
    Столбец_БИК_По = локЗначения[3];
    Столбец_Карта_По  = локЗначения[4];
end;


proc ВидФормы;
  Template.BeginModify;
    if (РежимВыводаНаЭкран = типРежимТолькоВывод) :
      секцСведения_Ввод.Visible = false;
      кнОк.Enabled = false;
    elsif (РежимВыводаНаЭкран = типРежимВвод) :
      секцСведения_Ввод.Visible = true;
      кнОк.Enabled = true;
    fi;
  Template.EndModify;
end;

proc СчетПоКлеткам;
  ТекстВСекциюПоКлеткам(СчетПолучателя, Строка_Счет, [Столбец_С,Столбец_Счет_По]);
end;

proc БИК_ПоКлеткам;
  ТекстВСекциюПоКлеткам(БИК, Строка_БИК, [Столбец_С,Столбец_БИК_По]);
end;

proc НомерКарты_ПоКлеткам;
  ТекстВСекциюПоКлеткам(НомерКарты, Строка_Карта, [Столбец_С,Столбец_Карта_По]);
end;




proc ТекстВСекциюПоКлеткам(локТекст : string; локСтрока : integer; локСтолб[] : integer);
  var j, nn : integer;
  var ss,ss1: string;
    nn = 0;
    ss = Up(локТекст);
    for j = локСтолб[1]..локСтолб[2] do
      if (секцСведения_Вывод.Cell[j,локСтрока].Contents <> '-') :
        nn = nn + 1;
        if (Length(ss) < nn) :
          ss1 = '';
        else
          ss1 = Substr(ss,nn,1);
        fi;
        секцСведения_Вывод.Cell[j,локСтрока].Contents = ss1;
      fi;
    end;
    if (nn < Length(ss)) :
      ss1 = Substr(ss,nn+1,Length(ss) - nn);
      j = локСтолб[2]+ 1;
      секцСведения_Вывод.Cell[j,локСтрока].Contents = ss1;
    fi;
end;



--}}

func Поле_ПриВыводе_ЗаголовокОкнаФормы (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
  var aTxt: string[];
  with СИС2.СтроковыеФункции  do
    aTxt[1] = MarkInGray(Заявление.НашеУчреждение.Наим);
    aTxt[2] = 'Банковские реквизиты для перечисления пособия к заявлениюN '+Заявление.НомерБум;
    if (Заявление.НомерКорректировки <> 0) :
      aTxt[2] = aTxt[2] + ' (номер корректировки = ' + Str(Заявление.НомерКорректировки) + ')';
    fi;
    if (Заявление.Субъект <> nil) :
      aTxt[3] = MarkInGray(Заявление.Субъект.Имя);
    else
      aTxt[3] = '<s-><s->' ;
    fi;
    Return МассивСтрокВТекст(aTxt);
  end;
end;


end