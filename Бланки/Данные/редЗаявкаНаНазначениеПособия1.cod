class inherited ТББ_Базовый.Базовые.БазовыйБланкДокумент "Заявка на назначение и оплату пособия", editor Данные.ЗаявкаНаНазначениеПособия;

import classes Константы,ФункцииПримененияКостант;--,ФункцииДанных;
import СИС2 classes Константы;
import Базовый classes Константы;

--{{ Свойства
inobject public

  var Интерфейс: Данные.интЗаявкаНаНазначениеПособия;

inobject private

  -- фреймы
  var фреймСоставФормы :TemplateFrame;
  var фреймСодержание :TemplateFrame;
  var фреймОсновныеСведения1 :TemplateFrame;
  var фреймПолучатель1 :TemplateFrame;
  var фреймДокументыПолучателя1 :TemplateFrame;
  var фреймСведенияБЛ1 :TemplateFrame;
  var фреймРасчетБЛ1 :TemplateFrame;
  var фреймВыплата1 :TemplateFrame;

  -- иконки

  type typeIcon = (iEdit = 1, iEdit_Disabled, iReport, iMan, iDokMan, iInput, iCalc, iCalc_Disabled, iMoney);
  var ImageLibr: Image[]; -- локальная библиотека изображений
  type typeSpCell = (cMenuAddr = 1, cMenuIdCard, cMenuCert);
  var CellLibr: TemplateCell[]; -- локальная (для экземпляра) библиотека клеток

  -- сведения о заявке

  var НомерРеестра: string = if(ПозицияРеестра <> nil, Str(ПозицияРеестра.Реестр.НомерЗаДень), '');
  var ВидСО: Бюджет_ЗПиДД.Справочники.ВидыСтраховогоОбеспечения;

  var ПозицияРеестра: Документы.ФСС.ПозицияРеестра; -- определяется при считывании
  var ЗаголовокЗаявки: string;

  -- интерфейсы связанных записей

  var ИнтАдресРегистрации :  Справочники.интАдресСоцСтрах;
  var ИнтАдресПроживания :  Справочники.интАдресСоцСтрах;
  var ИнтУдостоверениеЛичности :  Справочники.интУдостоверениеСоцСтрах;
  var ИнтДокументОПроживании :  Справочники.интУдостоверениеСоцСтрах;

  var ИнтСведения : variant;
  var ИнтРасчет : variant;

  --поля для редактироавния сведений для назначения пособия

  var ТипФормыБЛ : integer;
  var ДатаБЛ : date;
  var ДатаСтационар1БЛ : date;
  var ДатаСтационар2БЛ : date;
  var ДатаНачалаБЛ : date;
  var ДатаОкончанияБЛ : date;
  var ДатаВыходаНаРаботу : date;
  var ДатаРегистрацииВ_МСЭ : date;

--}}


-- _Конструкторы, визуализаторы. --

-- _Обработчики событий шаблона. --

proc шаблон_ПриСоздании(Context: Variant);
  inherited шаблон_ПриСоздании(Context);
  ИнициализироватьКлеткиГиперСсылок;
  ЗагрузитьИконки;
  ИнициализироватьИконкиФреймов;
  ОбновитьСписокПоля(Template.FrameByName['фреймВыплата1'].CellByField['СпособВыплаты'], ТипыСпособовВыплатыФЛ);
  ОбновитьСписокПоля(Template.FrameByName['фреймОсновныеСведения1'].CellByField['ТипИнфо'], ТипыИнфо);
  ОбновитьСписокПоля(Template.FrameByName['фреймОсновныеСведения1'].CellByField['ПричинаПерерасчета'], ТипыПричиныПерерасчета);
end;

proc шаблон_ПриСчитывании;
  inherited шаблон_ПриСчитывании;
  ПрочитатьПозициюРеестра;
  ВидСО = НазначениеПособия.ВидСтраховогоОбеспечения;
  if (Self.Record.State = Record.Created):
    Интерфейс.Post;
    Интерфейс.СоздатьСвязанныеЗаписи;
  fi;
  УстановитьИнтерфейсыСвязанныхЗаписей;
  ЗаполнитьЗаголовокЗаявки;
end;

func шаблон_ПриЗаписи: logical;
  Result = true;
  if (ИнтСведения <> nil) :
    ИнтСведения.Record.Edit;
    if (ИнтСведения.Record.Modified) :
      ИнтСведения.Record.Post;
    fi;
  fi;
end;

func шаблон_ПриОтмене : logical;
  Result = true;
  if (ИнтСведения <> nil) :
    if (ИнтСведения.Record.Modified) :
      ИнтСведения.Record.Cancel;
      ИнтСведения.Record.Edit;
    fi;
  fi;
end;

-- _Обработчики событий клеток шаблона. --

  proc Поле_ПриРисовании (Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
    if (Cell.Style.Name = 'Поле ввода'):
      if Cell.Enabled: inherited ПриРисовании_КакПолеВвода (Cell, Selected, Color, FieldColor, Font);
      else             inherited ПриРисовании_КакЗапрещенное (Cell, Selected, Color, FieldColor, Font);
      fi;
    elsif (Cell.Style.Name = 'Поле выбора'):
      if Cell.Enabled: inherited ПриРисовании_КакПолеВыбора (Cell, Selected, Color, FieldColor, Font);
      else             inherited ПриРисовании_КакЗапрещенное (Cell, Selected, Color, FieldColor, Font);
      fi;
    fi;
  end;

  func Поле_ПриВыводе_ЗаголовокОкнаФормы (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
    var aTxt: string[];
    with СИС2.СтроковыеФункции  do
      aTxt[1] = MarkInGray(НашеУчреждение.Наим);
      aTxt[2] = Сотрудник.Имя;
      aTxt[3] = '<b->' + MarkInItalic(ЗаголовокЗаявки);
      if Завершен:
        aTxt[3] = MarkInMaroon(aTxt[3]);
      fi;
      Return МассивСтрокВТекст(aTxt);
    end;
  end;

-- Основные сведения --

  func ОсновныеСведения_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    if (Cell.Contents = 'ИмяТипаПособия'):
      Return ИмяТипаПособия(ТипПособия);
    elsif (Cell.Contents = 'ИмяТипаПособияДоп'):
      Return ИмяТипаПособия(ТипПособияДоп);
    elsif (Cell.Contents = 'ИмяТипаРеестра'):
      Return ПолноеИмяТипаРеестра(ТипРеестра);
    elsif (Cell.Contents = 'ВидСО_Доп'):
      if (НазначениеПособияДоп <> nil):
        Return НазначениеПособияДоп.ВидСтраховогоОбеспечения.Наим;
      fi;
    fi;
  end;

  proc ОсновныеСведения_ПриВыходе (Cell: TemplateCell; Index: Integer);
    if (Cell.Contents = 'НомерБум'):
      inherited Поле_ПриВыходе(Cell, Index);
      ЗаполнитьЗаголовокЗаявки;
    fi;
  end;

-- Сведения о получателе пособия  --

  func ПолеАдрес_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    МенюАдреса;
  end;

  func ПолеАдрес_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    if (Cell.Contents = 'АдресРег_Строкой'):
      if (ИнтАдресРегистрации <> nil):
        Return ИнтАдресРегистрации.АдресСтрокой;
      fi;
    elsif (Cell.Contents = 'АдресПрож_Строкой'):
      if (ИнтАдресПроживания <> nil):
        Return ИнтАдресПроживания.АдресСтрокой;
      fi;
    fi;
  end;

  -- Документы получателя пособия --

  func ПолеДокументыПолучателя_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    if (CellRow(Cell).Caption = 'Удостоверение личности'):
      ОткрытьУдостоверенияЛичности;
    elsif (CellRow(Cell).Caption = 'Документ проживания'):
      МенюДокументаОПроживании;
    fi;
  end;

  func ПолеДокументыПолучателя_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    if (Cell.Contents in ['Серия_УдЛичн','Номер_УдЛичн','ДатаВыдачи_УдЛичн']):
      if (ИнтУдостоверениеЛичности <> nil) :
        if (Cell.Contents = 'Серия_УдЛичн'):
          Return ИнтУдостоверениеЛичности.СерияДокумента;
        elsif (Cell.Contents = 'Номер_УдЛичн'):
          Return ИнтУдостоверениеЛичности.НомерДокумента;
        elsif (Cell.Contents = 'ДатаВыдачи_УдЛичн'):
          Return ИнтУдостоверениеЛичности.ДатаВыдачиДокумента;
        fi;
      fi;
    elsif (Cell.Contents in ['НаимДок_ДокПрож','СерияНомер_ДокПрож','ДатаВыдачи_ДокПрож']):
      if (ИнтДокументОПроживании <> nil):
        if (Cell.Contents = 'НаимДок_ДокПрож'):
          Return ИнтДокументОПроживании.НаименованиеДокумента;
        elsif (Cell.Contents = 'СерияНомер_ДокПрож'):
          Return ИнтДокументОПроживании.СерияНомер_Реестр;
        elsif (Cell.Contents = 'ДатаВыдачи_ДокПрож'):
          Return ИнтДокументОПроживании.ДатаВыдачиДокумента;
        fi;
      fi;
    fi;
  end;

  -- Сведения для назначения пособия --

  func ПолеСведенияБЛ_ПриВходе (Cell: TemplateCell; Index: Integer; Action: Template.EnterTypes): Logical;
    if (ИнтСведения <> nil):
      EditorPost;
      Данные.редСведенияРеестраБЛ.ПоказатьМодально(ИнтСведения.Record, Cell.Contents, Завершен);
    fi;
  end;

  func ПолеСведенияБЛ_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    if (ИнтСведения <> nil):
      Return ИнтСведения.ПолеРедактораПриВыводе(Cell.Contents);
    fi;
  end;

  -- Сведения для расчета пособия --

  func ПолеРасчетБЛ_ПриВходе (Cell: TemplateCell; Index: Integer; Action: Template.EnterTypes): Logical;
    if (ИнтРасчет <> nil):
      EditorPost;
      Данные.редРасчетРеестраБЛ.ПоказатьМодально(ИнтРасчет.Record, Cell.Contents, Завершен);
    fi;
  end;

  func ПолеРасчетБЛ_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    if (ИнтРасчет <> nil):
      Return ИнтРасчет.ПолеРедактораПриВыводе(Cell.Contents);
    fi;
  end;

  -- Сведения для выплаты пособия --

  func ПолеВыплата_ПриВходе(Cell :TemplateCell; Index :Integer; Action : Template.EnterTypes) :Logical;
    var locForm: BlankForm;
    var локСтрока: string;
    if (Cell.Contents = 'СчетПолучателя') :
      локСтрока = СчетПолучателя;
      if ( cmOk = ТББ_Базовый.Библио.ВводНомераБанкСчета(локСтрока)) :
        СчетПолучателя = локСтрока;
      fi;
    elsif (Cell.Contents = 'БИК') :
      локСтрока = БИК;
      if ( cmOk = ТББ_Базовый.Библио.ВводНомераБик(локСтрока)) :
        БИК = локСтрока;
      fi;
    elsif (Cell.Contents = 'НомерКарты') :
      locForm = Бюджет_ЗПиДД.Служебные.блВводНомераБанкКарты.CreateEx(НомерКарты);
      if (cmOk = locForm.ShowEx( ,Window.ModalWindow)):
        НомерКарты = locForm.НомерБанкКарты as String;
      fi;
    fi;
  end;


-- _Обработчики событий прочих объектов шаблона. --

  proc флЗавершен_ПриНажатии (Sender: CheckBox);
    var Note: string;
    if (ПозицияРеестра <> nil):
      if Завершен:
        МодифицироватьФрейм_Кнопки;
        Note = 'Нельзя снять с заявки признак завершения, так как она включена в реестр';
        DisplayMessage(Note);
      else
        СИС2.ФункцииДокумента.RecordModify(Self.Record);
        Завершен = true;
        МодифицироватьШаблонДоп;
      fi;
    else
      СИС2.ФункцииДокумента.RecordModify(Self.Record);
      Завершен = not Завершен;
      МодифицироватьШаблонДоп;
    fi;
  end;

  proc кнВРеестр_ПриНажатии (Sender: Button);
  end;

-- _Дополнительные команды. --

-- _Вспомогательные методы. --

  proc ПрочитатьПозициюРеестра;
    ПозицияРеестра = Интерфейс.НайтиПозициюРеестра;
  end;

  proc УстановитьИнтерфейсыСвязанныхЗаписей;
    ИнтАдресРегистрации = Справочники.интАдресСоцСтрах.ОткрытьПоЗаявкеИТипу(Self.Record,тапПрописка);
    ИнтАдресПроживания = Справочники.интАдресСоцСтрах.ОткрытьПоЗаявкеИТипу(Self.Record,тапФактический);
    ИнтУдостоверениеЛичности = Справочники.интУдостоверениеСоцСтрах.ОткрытьПоЗаявкеИТипу(Self.Record,ТипДокПолучУдЛичности);
    ИнтДокументОПроживании = Справочники.интУдостоверениеСоцСтрах.ОткрытьПоЗаявкеИТипу(Self.Record,ТипДокПолучПроживание);
    ИнтСведения = nil;
    ИнтРасчет = nil;
    if (Self.Record.ТипРеестра = ТипРеестраНП_БЛ) :
      ИнтСведения = Данные.интСведенияРеестраБЛ.ОткрытьПоЗаявке(Self.Record);
      ИнтРасчет = Данные.интРасчетРеестраБЛ.ОткрытьПоЗаявке(Self.Record);
    fi;
  end;

  proc ЗагрузитьПоляСведений;
    if (Self.Record.ТипРеестра in [ТипПособияБЛ,ТипПособияБерем]) and (ИнтСведения <> nil):
      ИнтСведения.ЗагрузитьПоляВРедакторЗаявки(Self);
    fi;
  end;

  proc ЗаполнитьЗаголовокЗаявки;
    ЗаголовокЗаявки = 'Заявка № '+ if(НомерБум <> nil, НомерБум, 'б/н');
    if (ПозицияРеестра <> nil) :
      ЗаголовокЗаявки = ЗаголовокЗаявки + ', включена в реестр № ' + if(ПозицияРеестра.Реестр.РегНомерФСС <> nil, ПозицияРеестра.Реестр.РегНомерФСС, 'б/н') + '.';
    else
      ЗаголовокЗаявки = ЗаголовокЗаявки + '.';
    fi;
  end;

  -- Управление изображениями --

  proc ИнициализироватьКлеткиГиперСсылок;
    var locSection: TemplateSection;
    locSection = SectionByName('секцПолучатель1');
    CellLibr[cMenuAddr] = SectionCellByContents(locSection, 'Меню');
    locSection = SectionByName('секцДокПолучателя1');
    CellLibr[cMenuIdCard] = SectionCellByContents(locSection, 'Меню');
    locSection = SectionByName('секцДокПолучателя2');
    CellLibr[cMenuCert] = SectionCellByContents(locSection, 'Меню');
  end;

  proc ЗагрузитьИконки;
    ImageLibr[iEdit] = Image.Create;
    ImageLibr[iEdit].LoadFromFile('%Projects%\ТББ_Базовый\Приложения\Иконки\32\Edit.ico');
    ImageLibr[iEdit_Disabled] = Image.Create;
    ImageLibr[iEdit_Disabled].LoadFromFile('%Projects%\ТББ_Базовый\Приложения\Иконки\32\EditDisabled.ico');
    ImageLibr[iReport] = Image.Create;
    ImageLibr[iReport].LoadFromFile('%Projects%\ТББ_Базовый\Приложения\Иконки\32\information.ico');
    ImageLibr[iMan] = Image.Create;
    ImageLibr[iMan].LoadFromFile('%Projects%\ТББ_Базовый\Приложения\Иконки\Бизнесмен.ico');
    ImageLibr[iDokMan] = Image.Create;
    ImageLibr[iDokMan].LoadFromFile('%Projects%\ТББ_Базовый\Приложения\Иконки\Книги.ico');
    ImageLibr[iInput] = Image.Create;
    ImageLibr[iInput].LoadFromFile('%Projects%\ТББ_Базовый\Приложения\Иконки\Справка.ico');
    ImageLibr[iCalc] = Image.Create;
    ImageLibr[iCalc].LoadFromFile('%Projects%\Бюджет_ЗПиДД\Приложения\Иконки\32\calc.ico');
    ImageLibr[iCalc_Disabled] = Image.Create;
    ImageLibr[iCalc_Disabled].LoadFromFile('%Projects%\Бюджет_ЗПиДД\Приложения\Иконки\32\calc_disabled.ico');
    ImageLibr[iMoney] = Image.Create;
    ImageLibr[iMoney].LoadFromFile('%Projects%\Бюджет_ЗПиДД\Приложения\Иконки\Выплаты.ico');
  end;

  proc ИнициализироватьИконкиФреймов;
    фреймЗакладки.Image = ImageLibr[iEdit];
    фреймОсновныеСведения1.Image = ImageLibr[iReport];
    фреймПолучатель1.Image = ImageLibr[iMan];
    фреймДокументыПолучателя1.Image = ImageLibr[iDokMan];
    фреймСведенияБЛ1.Image = ImageLibr[iInput];
    фреймРасчетБЛ1.Image = ImageLibr[iCalc];
    фреймВыплата1.Image = ImageLibr[iMoney];
  end;

  proc ИнициализироватьИконкиПолучатель;
    if Завершен:
      ИнициализироватьИконкуКлетки(cMenuAddr, iEdit_Disabled);
    else
      ИнициализироватьИконкуКлетки(cMenuAddr, iEdit);
    fi;
  end;

  proc ИнициализироватьИконкиДокументыПолучателя;
    if Завершен:
      ИнициализироватьИконкуКлетки(cMenuIdCard, iEdit_Disabled);
      ИнициализироватьИконкуКлетки(cMenuCert, iEdit_Disabled);
    else
      ИнициализироватьИконкуКлетки(cMenuIdCard, iEdit);
      ИнициализироватьИконкуКлетки(cMenuCert, iEdit);
    fi;
  end;

  proc ИнициализироватьИконкуКлетки (iCell: typeSpCell; iIco: typeIcon);
    var locCell: TemplateCell;
    locCell = CellLibr[iCell];
    if (locCell <> nil):
      locCell.Image = Image.Create;
      locCell.ImageAlign = Template.AlignClient;
      locCell.ImageWithText = true;
      locCell.Contents = '';
      locCell.Image.Assign(ImageLibr[iIco]);
    fi;
  end;

  -- Управление GUI --

  proc МодифицироватьШаблон (ШаблонМодифицирован: Logical = false);
    Template.BeginModify;
      МодифицироватьФрейм_Кнопки;
      МодифицироватьФрейм_ОсновныеСведения;
      МодифицироватьФрейм_Получатель;
      МодифицироватьФрейм_ДокументыПолучателя;
      МодифицироватьФрейм_СведенияБЛ;
      МодифицироватьФрейм_РасчетБЛ;
      МодифицироватьФрейм_Выплата;
      if (Self.Record.ТипРеестра in [ТипПособияБЛ,ТипПособияБерем]):
        фреймСведенияБЛ1.Caption = 'Сведения для назначения пособия';
        фреймРасчетБЛ1.Caption = 'Сведения для расчета пособия';
      else
        фреймСведенияБЛ1.Caption = '';
        фреймРасчетБЛ1.Caption = '';
      fi;
    Template.EndModify;
    inherited МодифицироватьШаблон(true); -- раскраска
  end;

  proc МодифицироватьФрейм_Кнопки;
    флЗавершен.State = Self.Record.Завершен;
  end;

  proc МодифицироватьФрейм_ОсновныеСведения;
    ЗапретитьДоступККлеткамФрейма(фреймОсновныеСведения1, not Завершен);
  end;

  proc МодифицироватьФрейм_Получатель;
    ЗапретитьДоступККлеткамФрейма(фреймПолучатель1, not Завершен);
    CellLibr[cMenuAddr].Enabled = not Завершен;
    ИнициализироватьИконкиПолучатель;
  end;

  proc МодифицироватьФрейм_ДокументыПолучателя;
    ЗапретитьДоступККлеткамФрейма(фреймДокументыПолучателя1, not Завершен);
    CellLibr[cMenuIdCard].Enabled = not Завершен;
    CellLibr[cMenuCert].Enabled = not Завершен;
    ИнициализироватьИконкиДокументыПолучателя;
  end;

  proc МодифицироватьФрейм_СведенияБЛ;
    ЗапретитьДоступККлеткамФрейма(фреймСведенияБЛ1, not Завершен);
  end;

  proc МодифицироватьФрейм_РасчетБЛ;
    ЗапретитьДоступККлеткамФрейма(фреймРасчетБЛ1, not Завершен);
  end;

  proc МодифицироватьФрейм_Выплата;
    ЗапретитьДоступККлеткамФрейма(фреймВыплата1, not Завершен);
  end;

  proc ОформитьНавигатор (тблНавигатор: Grid);
    inherited ОформитьНавигатор(тблНавигатор);
    тблНавигатор.ShowIcons = true;
  end;

  --

  proc МенюАдреса;
    var locValuePosition: variant[];
    var p: integer;
    var локИнт: Справочники.интАдресСоцСтрах;
    var локАдрес: Базовый.Справочники.Адрес;
    locValuePosition[1] = 'Открыть адрес регистрации';
    locValuePosition[2] = 'Открыть адрес проживания';
    if (ИнтАдресПроживания <> nil) :
      locValuePosition[3] = 'Удалить адрес проживания';
    elsif (ИнтАдресРегистрации <> nil and ИнтАдресПроживания = nil) :
      locValuePosition[3] = 'Копировать адрес регистрации в адрес проживания';
    fi;
    p = PopupMenu(locValuePosition);
    if (p = 1):
      локИнт = ИнтАдресРегистрации;
      РедактироватьАдрес(локИнт,тапПрописка);
      ИнтАдресРегистрации = локИнт;
    elsif (p = 2):
      локИнт = ИнтАдресПроживания;
      РедактироватьАдрес(локИнт,тапФактический);
      ИнтАдресПроживания = локИнт;
    elsif (p = 3):
      if (locValuePosition[3] = 'Удалить адрес проживания') :
        локАдрес = ИнтАдресПроживания.Record;
        ИнтАдресПроживания = nil;
        локАдрес.Delete;
      elsif (locValuePosition[3] = 'Копировать адрес регистрации в адрес проживания') :
        локАдрес = ИнтАдресРегистрации.Record;
        локИнт = Справочники.интАдресСоцСтрах.СоздатьКопиюДляЗаявкиИТипа(локАдрес,Self.Record,тапФактический);
        локИнт.Record.Post;
        ИнтАдресПроживания = локИнт;
      fi;
    fi;
  end;

  proc РедактироватьАдрес (var локИнт: Справочники.интАдресСоцСтрах; локТипАдреса: integer);
    var локАдрес: Базовый.Справочники.Адрес;
    if (локИнт = nil):
      локИнт = Справочники.интАдресСоцСтрах.СоздатьПоЗаявкеИТипу(Self.Record,локТипАдреса);
    fi;
    локАдрес = локИнт.Record;
    Справочники.интАдресСоцСтрах.БланкРедакторПоУмолчанию.ShowFormEx(локАдрес , Kernel.Window.ModalWindow);
    локАдрес = Справочники.интАдресСоцСтрах.НайтиАдресПоЗаявкеИТипу(Self.Record,локТипАдреса);
    if (локАдрес = nil) :
      локИнт = nil;
    else
      локИнт.Record = локАдрес;
    fi;
  end;

  proc ОткрытьУдостоверенияЛичности;
    var локИнт: Справочники.интУдостоверениеСоцСтрах;
    локИнт = ИнтУдостоверениеЛичности;
    РедактироватьДокПолучателя(локИнт,ТипДокПолучУдЛичности);
    ИнтУдостоверениеЛичности = локИнт;
  end;

  proc МенюДокументаОПроживании;
    var locValuePosition: variant[];
    var p: integer;
    var локИнт: Справочники.интУдостоверениеСоцСтрах;
    var локДокумент: Базовый.Справочники.Удостоверение;
    if (ИнтДокументОПроживании = nil):
      локИнт = ИнтДокументОПроживании;
      РедактироватьДокПолучателя(локИнт, ТипДокПолучПроживание);
      ИнтДокументОПроживании = локИнт;
    else
      locValuePosition[1] = 'Открыть документ';
      locValuePosition[2] = 'Удалить документ';
      p = PopupMenu(locValuePosition);
      if (p = 1):
        локИнт = ИнтДокументОПроживании;
        РедактироватьДокПолучателя(локИнт, ТипДокПолучПроживание);
        ИнтДокументОПроживании = локИнт;
      elsif (p = 2):
        локДокумент = ИнтДокументОПроживании.Record;
        ИнтДокументОПроживании = nil;
        локДокумент.Delete;
      fi;
    fi;
  end;

  proc РедактироватьДокПолучателя (var локИнт: Справочники.интУдостоверениеСоцСтрах; локТипДокумента: integer);
    var локДокумент: Базовый.Справочники.Удостоверение;
    if (локИнт = nil):
      локИнт = Справочники.интУдостоверениеСоцСтрах.СоздатьПоЗаявкеИТипу(Self.Record,локТипДокумента);
    fi;
    локДокумент = локИнт.Record;
    Справочники.интУдостоверениеСоцСтрах.БланкРедакторПоУмолчанию.ShowFormEx(локДокумент , Kernel.Window.ModalWindow);
    локДокумент = Справочники.интУдостоверениеСоцСтрах.НайтиДокументПоЗаявкеИТипу(Self.Record,локТипДокумента);
    if (локДокумент = nil):
      локИнт = nil;
    else
      локИнт.Record = локДокумент;
    fi;
  end;

end