class inherited ТББ_Базовый.Базовые.БазовыйБланкДокумент "Базовый редактор заявки на назначение и оплату пособия", editor Данные.ЗаявкаНаНазначениеПособия;

import classes Константы,ФункцииПримененияКостант;--,ФункцииДанных;
import СИС2 classes Константы;
import Базовый classes Константы;


--{{ Свойства


inobject public

  var Интерфейс: Данные.интЗаявкаНаНазначениеПособия;


--}}


inobject private

--type ТипыМодификацииШаблона  = (ТипМШ_Счит = 0, ТипМШа_Завершение, ТипМШ_Раздел) ; --ТипМШ_РедСвязанныеЗаписи);

type РазделыФормы = (РазделОснСвед = 1, РазделПолуч, РазделДокПолуч,РазделСвед, РазделРасч, РазделВыпл);


var АктивныйРаздел : integer;
var СписокФреймов[] : variant;

  --фреймы


  var фреймСоставФормы :TemplateFrame;
  var фреймСодержание :TemplateFrame;
  var фреймОсновныеСведения :TemplateFrame;
  var фреймПолучатель :TemplateFrame;
  var фреймДокументыПолучателя :TemplateFrame;
  var фреймСведенияБЛ :TemplateFrame;
  var фреймРасчетБЛ :TemplateFrame;
  var фреймВыплата :TemplateFrame;

  --кнопки

  var кнЗавершить : Button;
  var кнВРеестр : Button;
--иконки

type типИконка = (iMenu=1);
var ImageLibr: Image[]; -- локальная библиотека изображений


--сведения о заявке

var ПризнакЗавершения : string = if (Завершено : 'Заявка завершена',  '');
var НомерРеестра : string = if(ПозицияРеестра <> nil : Str(ПозицияРеестра.Реестр.НомерЗаДень), '');
var ВидСО : Бюджет_ЗПиДД.Справочники.ВидыСтраховогоОбеспечения;

var ПозицияРеестра : Документы.ФСС.ПозицияРеестра;  --определяется при считывании
var ЗаголовокЗаявки : string;

--интерфейсф связанных записей

var ИнтАдресРегистрации :  Справочники.интАдресСоцСтрах;
var ИнтАдресПроживания :  Справочники.интАдресСоцСтрах;
var ИнтУдостоверениеЛичности :  Справочники.интУдостоверениеСоцСтрах;
var ИнтДокументОПроживании :  Справочники.интУдостоверениеСоцСтрах;

var ИнтСведения : variant;
var ИнтРасчет : variant;

--поля для редактироавния сведений для назначения пособия

var ТипФормыБЛ : integer;
var ДатаБЛ : date;
var ДатаСтационар1БЛ : date;
var ДатаСтационар2БЛ : date;
var ДатаНачалаБЛ : date;
var ДатаОкончанияБЛ : date;
var ДатаВыходаНаРаботу : date;
var ДатаРегистрацииВ_МСЭ : date;


--------------------------------------------------------------------------------
--{ Обработчики событий бланка

proc шаблон_ПриСоздании(Context :Variant);
  inherited шаблон_ПриСоздании(Context);
  ЗагрузитьИконку(iMenu, 'edit.ico');
  ОбновитьСписокПоля(фреймВыплата.CellByField['СпособВыплаты'], ТипыСпособовВыплатыФЛ);
  ОбновитьСписокПоля(фреймОсновныеСведения.CellByField['ТипИнфо'], ТипыИнфо);
  ОбновитьСписокПоля(фреймОсновныеСведения.CellByField['ПричинаПерерасчета'], ТипыПричиныПерерасчета);
end;


proc шаблон_ПриСчитывании;
  inherited шаблон_ПриСчитывании;
  ПрочитатьПозициюРеестра;
  ВидСО = НазначениеПособия.ВидСтраховогоОбеспечения;
  if (Интерфейс <> nil) :
    Интерфейс.Record = Self.Record;
  fi;
  if (Self.Record.State = Record.Created) :
    EditorPost;
    Интерфейс.СоздатьСвязанныеЗаписи;
  fi;
  УстановитьИнтерфейсыСвязанныхЗаписей;
  СоставитьСписокФреймов;
  МодифицироватьШаблонПриСчитывании;
  АктивныйРаздел = РазделОснСвед;
  ВидФормы;
end;

func шаблон_ПриЗаписи : logical;
  Result = true;
  if (ИнтСведения <> nil) :
    ИнтСведения.Record.Edit;
    if (ИнтСведения.Record.Modified) :
      ИнтСведения.Record.Post;
    fi;
  fi;
end;

func шаблон_ПриОтмене : logical;
  Result = true;
  if (ИнтСведения <> nil) :
    if (ИнтСведения.Record.Modified) :
      ИнтСведения.Record.Cancel;
      ИнтСведения.Record.Edit;
    fi;
  fi;
end;



proc Поле_ПриРисовании (Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
  if (Cell.Style.Name = 'Поле ввода'):
    if Cell.Enabled: inherited ПриРисовании_КакПолеВвода (Cell, Selected, Color, FieldColor, Font);
    else             inherited ПриРисовании_КакЗапрещенное (Cell, Selected, Color, FieldColor, Font);
    fi;
  elsif (Cell.Style.Name = 'Поле выбора'):
    if Cell.Enabled: inherited ПриРисовании_КакПолеВыбора (Cell, Selected, Color, FieldColor, Font);
    else             inherited ПриРисовании_КакЗапрещенное (Cell, Selected, Color, FieldColor, Font);
    fi;
  fi;
end;

func ОсновныеСведения_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
  Result = '';
  if (Cell.Contents = 'ИмяТипаПособия' ) :
    return  ИмяТипаПособия(ТипПособия);
  elsif (Cell.Contents = 'ИмяТипаРеестра'  ) :
    return  ПолноеИмяТипаРеестра(ТипРеестра);
  fi;
end;

proc ОсновныеСведения_ПриВыходе(Cell: TemplateCell; Index: Integer);
  if (Cell.Contents = 'НомерБум' ) :
    ЗаполнитьЗаголовокЗаявки;
    inherited Поле_ПриВыходе(Cell,Index);
  fi;
end;

func ПолеАдрес_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
  Result = '';
  if (Cell.Contents = 'АдресРег_Строкой' ) :
    if (ИнтАдресРегистрации <> nil) :
      return  ИнтАдресРегистрации.АдресСтрокой;
    fi;
  elsif (Cell.Contents = 'АдресПрож_Строкой'  ) :
    if (ИнтАдресПроживания <> nil) :
      return  ИнтАдресПроживания.АдресСтрокой;
    fi;
  fi;
end;

func ПолеДокументыПолучателя_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
  Result = nil;
  if (Cell.Contents in ['Серия_УдЛичн','Номер_УдЛичн','ДатаВыдачи_УдЛичн'] ) :
    if (ИнтУдостоверениеЛичности <> nil) :
      if (Cell.Contents = 'Серия_УдЛичн') :
        return ИнтУдостоверениеЛичности.СерияДокумента;
      elsif (Cell.Contents = 'Номер_УдЛичн') :
        return ИнтУдостоверениеЛичности.НомерДокумента;
      elsif (Cell.Contents = 'ДатаВыдачи_УдЛичн') :
        return ИнтУдостоверениеЛичности.ДатаВыдачиДокумента;
      fi;
    fi;
  elsif (Cell.Contents in ['НаимДок_ДокПрож','СерияНомер_ДокПрож','ДатаВыдачи_ДокПрож'] ) :
    if (ИнтДокументОПроживании <> nil) :
      if (Cell.Contents = 'НаимДок_ДокПрож') :
        return ИнтДокументОПроживании.НаименованиеДокумента;
      elsif (Cell.Contents = 'СерияНомер_ДокПрож') :
        return ИнтДокументОПроживании.СерияНомер_Реестр;
      elsif (Cell.Contents = 'ДатаВыдачи_ДокПрож') :
        return ИнтДокументОПроживании.ДатаВыдачиДокумента;
      fi;
    fi;
  fi;
end;

func ПолеАдрес_ПриНажатии(Cell:TemplateCell; Action : Template.ClickTypes) : Logical;
  Result = false;
  МенюАдреса;
end;

func ПолеДокументыПолучателя_ПриНажатии(Cell:TemplateCell; Action : Template.ClickTypes) : Logical;
  var locRow : integer;
    Result = false;
    locRow = Cell.Row;
    if (Cell.Owner.Row[locRow].Name = 'стрУдЛичн_Ред') :
      ОткрытьУдостоверенияЛичности;
    elsif (Cell.Owner.Row[locRow].Name = 'стрДокПрож_Ред') :
      МенюДокументаОПроживании;
    fi;
end;

func ПолеСведенияБЛ_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
  Result = '';
  if (ИнтСведения <> nil) :
    return ИнтСведения.ПолеРедактораПриВыводе(Cell.Contents);
  fi;
end;

func ПолеСведенияБЛ_ПриВходе(Cell :TemplateCell; Index :Integer; Action : Template.EnterTypes) :Logical;
  Result = false;
  if (ИнтСведения <> nil) :
    EditorPost;
    Данные.редСведенияРеестраБЛ.ПоказатьМодально(ИнтСведения.Record,Cell.Contents,Завершено);
  fi;
end;

func ПолеРасчетБЛ_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
  Result = '';
  if (ИнтРасчет <> nil) :
    return ИнтРасчет.ПолеРедактораПриВыводе(Cell.Contents);
  fi;
end;


func ПолеРасчетБЛ_ПриВходе(Cell :TemplateCell; Index :Integer; Action : Template.EnterTypes) :Logical;
  Result = false;
  if (ИнтРасчет <> nil) :
    EditorPost;
    Данные.редРасчетРеестраБЛ.ПоказатьМодально(ИнтРасчет.Record,Cell.Contents,Завершено);
  fi;
end;




func ПолеВыплата_ПриВходе(Cell :TemplateCell; Index :Integer; Action : Template.EnterTypes) :Logical;
  var locForm: BlankForm;
  var локСтрока : string;
  Result = false;
  if (Cell.Contents = 'Открыть') :
    локСтрока = СчетПолучателя;
    if ( cmOk = ТББ_Базовый.Библио.ВводНомераБанкСчета(локСтрока)) :
      СчетПолучателя = локСтрока;
    fi;
  elsif (Cell.Contents = 'БИК') :
    локСтрока = БИК;
    if ( cmOk = ТББ_Базовый.Библио.ВводНомераБик(локСтрока)) :
      БИК = локСтрока;
    fi;
  elsif (Cell.Contents = 'НомерКарты') :
    locForm = Бюджет_ЗПиДД.Служебные.блВводНомераБанкКарты.CreateEx(НомерКарты);
    if (cmOk = locForm.ShowEx( ,Window.ModalWindow)):
      НомерКарты = locForm.НомерБанкКарты as String;
    fi;
  fi;
end;

func ПолеРазделы_ПриНажатии(Cell:TemplateCell; Action : Template.ClickTypes) : Logical;
  var ii : integer;
    Result = false;
    ii = -1;
    if (Cell.Contents = 'ОснСвед') :             --потом нужна будет другая проверка, по имени столбца или что-то в этом духе
      ii = РазделОснСвед;
    elsif (Cell.Contents = 'Получ') :
      ii = РазделПолуч;
    elsif (Cell.Contents = 'ДокПолуч') :
      ii = РазделДокПолуч;
    elsif (Cell.Contents = 'СведПос') :
      ii = РазделСвед;
    elsif (Cell.Contents = 'РасчПос') :
      ii = РазделРасч;
    elsif (Cell.Contents = 'СведВыпл') :
      ii = РазделВыпл;
    fi;
    if (ii > 0) :
      if (СписокФреймов[ii] <> nil) :
        АктивныйРаздел = ii;
        ВидФормы;
      fi;
    fi;
end;



proc кнЗавершить_ПриНажатии (Sender: Button);
  var Note : string;
  if (кнЗавершить.Caption = 'Завершить') :
    --нужна проверка
     Завершено = true;
  else
    if (ПозицияРеестра <> nil) :
      Note = 'Нельзя снять с заявки признак завершения, так как она включена в реестр';
      Message(Note);
      return;
    else
      Завершено = false;
    fi;
  fi;
  МодифицироватьШаблонПоЗавершено;
end;

proc кнВРеестр_ПриНажатии (Sender: Button);
end;



--}

--{{ Вспомогательные методы

proc ПрочитатьПозициюРеестра;
  ПозицияРеестра = Интерфейс.НайтиПозициюРеестра;
end;

proc УстановитьИнтерфейсыСвязанныхЗаписей;
  ИнтАдресРегистрации = Справочники.интАдресСоцСтрах.ОткрытьПоЗаявкеИТипу(Self.Record,тапПрописка);
  ИнтАдресПроживания = Справочники.интАдресСоцСтрах.ОткрытьПоЗаявкеИТипу(Self.Record,тапФактический);
  ИнтУдостоверениеЛичности = Справочники.интУдостоверениеСоцСтрах.ОткрытьПоЗаявкеИТипу(Self.Record,ТипДокПолучУдЛичности);
  ИнтДокументОПроживании = Справочники.интУдостоверениеСоцСтрах.ОткрытьПоЗаявкеИТипу(Self.Record,ТипДокПолучПроживание);
  ИнтСведения = nil;
  ИнтРасчет = nil;
  if (Self.Record.ТипРеестра = ТипРеестраНП_БЛ) :
    ИнтСведения = Данные.интСведенияРеестраБЛ.ОткрытьПоЗаявке(Self.Record);
    ИнтРасчет = Данные.интРасчетРеестраБЛ.ОткрытьПоЗаявке(Self.Record);
  fi;
end;

proc СоставитьСписокФреймов;
  СписокФреймов = nil;
  СписокФреймов[РазделОснСвед] = фреймОсновныеСведения;
  СписокФреймов[РазделПолуч] = фреймПолучатель;
  СписокФреймов[РазделДокПолуч] = фреймДокументыПолучателя;
  if (Self.Record.ТипРеестра = ТипРеестраНП_БЛ) :    --!!!фреймы
    if (Self.Record.ТипПособия = ТипПособияРанСрок) :
       --СписокФреймов[РазделСвед] = фреймСведенияРанСроки;
      СписокФреймов[РазделРасч] = nil;
    else
      СписокФреймов[РазделСвед] = фреймСведенияБЛ;
      СписокФреймов[РазделРасч] = фреймРасчетБЛ;
    fi;
  fi;
  СписокФреймов[РазделВыпл] = фреймВыплата;
end;


proc ЗагрузитьПоляСведений;
  if (Self.Record.ТипРеестра = ТипРеестраНП_БЛ) :
    ИнтСведения.ЗагрузитьПоляВРедакторЗаявки(Self);
  fi;
end;



proc МенюАдреса;
  var locValuePosition: variant[];
  var p: integer;
  var локИнт : Справочники.интАдресСоцСтрах;
  var локАдрес : Базовый.Справочники.Адрес;
    locValuePosition[1] = 'Открыть адрес регистрации';
    locValuePosition[2] = 'Открыть адрес проживания';
    if (ИнтАдресПроживания <> nil) :
      locValuePosition[3] = 'Удалить адрес проживания';
    elsif (ИнтАдресРегистрации <> nil and ИнтАдресПроживания = nil) :
      locValuePosition[3] = 'Копировать адрес регистрации в адрес проживания';
    fi;
    p = PopupMenu(locValuePosition);
    if (p = 1):
      локИнт = ИнтАдресРегистрации;
      РедактироватьАдрес(локИнт,тапПрописка);
      ИнтАдресРегистрации = локИнт;
    elsif (p = 2):
      локИнт = ИнтАдресПроживания;
      РедактироватьАдрес(локИнт,тапФактический);
      ИнтАдресПроживания = локИнт;
    elsif (p = 3):
      if (locValuePosition[3] = 'Удалить адрес проживания') :
        локАдрес = ИнтАдресПроживания.Record;
        ИнтАдресПроживания = nil;
        локАдрес.Delete;
      elsif (locValuePosition[3] = 'Копировать адрес регистрации в адрес проживания') :
        локАдрес = ИнтАдресРегистрации.Record;
        локИнт = Справочники.интАдресСоцСтрах.СоздатьКопиюДляЗаявкиИТипа(локАдрес,Self.Record,тапФактический);
        локИнт.Record.Post;
        ИнтАдресПроживания = локИнт;
      fi;
    fi;
end;

proc РедактироватьАдрес(var локИнт : Справочники.интАдресСоцСтрах; локТипАдреса : integer);
  var локАдрес : Базовый.Справочники.Адрес;
    if (локИнт = nil) :
      локИнт = Справочники.интАдресСоцСтрах.СоздатьПоЗаявкеИТипу(Self.Record,локТипАдреса);
    fi;
    локАдрес = локИнт.Record;
    Справочники.интАдресСоцСтрах.БланкРедакторПоУмолчанию.ShowFormEx(локАдрес , Kernel.Window.ModalWindow);
    локАдрес = Справочники.интАдресСоцСтрах.НайтиАдресПоЗаявкеИТипу(Self.Record,локТипАдреса);
    if (локАдрес = nil) :
      локИнт = nil;
    else
      локИнт.Record = локАдрес;
    fi;
end;

proc ОткрытьУдостоверенияЛичности;
  var локИнт : Справочники.интУдостоверениеСоцСтрах;
     локИнт = ИнтУдостоверениеЛичности;
     РедактироватьДокПолучателя(локИнт,ТипДокПолучУдЛичности);
     ИнтУдостоверениеЛичности = локИнт;
end;

proc МенюДокументаОПроживании;
  var locValuePosition: variant[];
  var p: integer;
  var локИнт : Справочники.интУдостоверениеСоцСтрах;
  var локДокумент : Базовый.Справочники.Удостоверение;
    if (ИнтДокументОПроживании = nil) :
      локИнт = ИнтДокументОПроживании;
      РедактироватьДокПолучателя(локИнт,ТипДокПолучПроживание);
      ИнтДокументОПроживании = локИнт;
    else
      locValuePosition[1] = 'Открыть документ';
      locValuePosition[2] = 'Удалить документ';
      p = PopupMenu(locValuePosition);
      if (p = 1) :
        локИнт = ИнтДокументОПроживании;
        РедактироватьДокПолучателя(локИнт,ТипДокПолучПроживание);
        ИнтДокументОПроживании = локИнт;
      elsif (p = 2) :
        локДокумент = ИнтДокументОПроживании.Record;
        ИнтДокументОПроживании = nil;
        локДокумент.Delete;
      fi;
    fi;
end;



proc РедактироватьДокПолучателя(var локИнт : Справочники.интУдостоверениеСоцСтрах; локТипДокумента : integer);
  var локДокумент : Базовый.Справочники.Удостоверение;
    if (локИнт = nil) :
      локИнт = Справочники.интУдостоверениеСоцСтрах.СоздатьПоЗаявкеИТипу(Self.Record,локТипДокумента);
    fi;
    локДокумент = локИнт.Record;
    Справочники.интУдостоверениеСоцСтрах.БланкРедакторПоУмолчанию.ShowFormEx(локДокумент , Kernel.Window.ModalWindow);
    локДокумент = Справочники.интУдостоверениеСоцСтрах.НайтиДокументПоЗаявкеИТипу(Self.Record,локТипДокумента);
    if (локДокумент = nil) :
      локИнт = nil;
    else
      локИнт.Record = локДокумент;
    fi;
end;

proc ВидФормы;
 Template.BeginModify;
   if (СписокФреймов[АктивныйРаздел] <> nil) :
     Template.CurrentFrame = СписокФреймов[АктивныйРаздел];
   fi;
 Template.EndModify;
end;

proc МодифицироватьШаблонПриСчитывании;
  Template.BeginModify;
    МодифицироватьФреймыПоЗавершено;
    фреймСоставФормы.ShowTabs = false;
    ЗаголовкЗаявкиНаЭкран;
    КнопкиДопСервисНаЭкран;
    --УстановитьКнопкиРазделов;
  Template.EndModify;
end;

proc МодифицироватьШаблонПоЗавершено;
  Template.BeginModify;
    МодифицироватьФреймыПоЗавершено;
    КнопкиДопСервисНаЭкран;
    ЗаголовкЗаявкиНаЭкран;
  Template.EndModify;
end;


proc МодифицироватьФреймыПоЗавершено;
  МодифицироватьФреймПолучатель;
  МодифицироватьФреймДокументыПолучателя;
  if (СписокФреймов[РазделСвед] = фреймСведенияБЛ) :
    МодифицироватьФреймСведенияБЛ;
  fi;
  if (СписокФреймов[РазделРасч] = фреймРасчетБЛ) :
    МодифицироватьфреймРасчетБЛ;
  fi;
  МодифицироватьФреймВыплата;
end;



proc МодифицироватьФреймПолучатель;
  var локСекц : TemplateSection;
  var locCol,i  : integer;
    локСекц = СекцияПоИмени('секцПолучатель',фреймПолучатель);
    locCol = СтолбецСекцииПоИмени(локСекц,'стбСвед_Получ').Number;
    for i = 1..локСекц.RowsCount do
      if (локСекц.Row[i].Name = 'стрАдрес_Ред') :
        локСекц.Row[i].Visible = not Завершено;
      elsif (локСекц.Row[i].Name = 'стрАдрес_НеРед') :
        локСекц.Row[i].Visible = Завершено;
      else
        if (локСекц.Cell[locCol,i].CellType = Template.FieldCell) :
          локСекц.Cell[locCol,i].Enabled = not Завершено;
        fi;
      fi;
    end;
end;

proc МодифицироватьФреймДокументыПолучателя;
  var локСекц : TemplateSection;
  var i  : integer;
    локСекц = СекцияПоИмени('секцДокПолучателя',фреймДокументыПолучателя);
    for i = 1..локСекц.RowsCount do
      if (локСекц.Row[i].Name = 'стрУдЛичн_Ред') :
        локСекц.Row[i].Visible = not Завершено;
      elsif (локСекц.Row[i].Name = 'стрУдЛичн_НеРед') :
        локСекц.Row[i].Visible = Завершено;
      elsif (локСекц.Row[i].Name = 'стрДокПрож_Ред') :
        локСекц.Row[i].Visible = not Завершено;
      elsif (локСекц.Row[i].Name = 'стрДокПрож_НеРед') :
        локСекц.Row[i].Visible = Завершено;
      fi;
    end;
end;

proc МодифицироватьФреймСведенияБЛ;
  var локСекц : TemplateSection;
  var i,locCol  : integer;
  var Cell : TemplateCell;
    Cell = фреймСведенияБЛ.CellByField['ФормаБЛ_Реестр'];
    локСекц =Cell.Owner;
    locCol = Cell.Column;
    for i = 1..локСекц.RowsCount do
      if (локСекц.Cell[locCol,i].CellType = Template.FieldCell) :
        локСекц.Cell[locCol,i].Enabled = not Завершено;
        локСекц.Cell[locCol,i].Button = not Завершено;
      fi;
    end;
end;

proc МодифицироватьФреймРасчетБЛ;
  var локСекц : TemplateSection;
  var i,locCol  : integer;
  var Cell : TemplateCell;
    Cell = фреймРасчетБЛ.CellByField['Стаж_Реестр'];
    локСекц =Cell.Owner;
    locCol = Cell.Column;
    for i = 1..локСекц.RowsCount do
      if (локСекц.Cell[locCol,i].CellType = Template.FieldCell) :
        локСекц.Cell[locCol,i].Enabled = not Завершено;
        локСекц.Cell[locCol,i].Button = not Завершено;
      fi;
    end;
end;

proc МодифицироватьФреймВыплата;
  фреймВыплата.CellByField['СпособВыплаты'].Enabled = not Завершено;
  фреймВыплата.CellByField['БанкНаим'].Enabled = not Завершено;
  фреймВыплата.CellByField['СчетПолучателя'].Enabled = not Завершено;
  фреймВыплата.CellByField['БИК'].Enabled = not Завершено;
  фреймВыплата.CellByField['НомерКарты'].Enabled = not Завершено;
end;

proc КнопкиДопСервисНаЭкран;
  кнЗавершить.Enabled = false;
  кнВРеестр.Enabled = false;
  if (Завершено) :
    кнЗавершить.Caption = 'Отменить завершение';
    if (ПозицияРеестра = nil) :
      кнЗавершить.Enabled = true;
    fi;
  else
    кнЗавершить.Caption = 'Завершить';
    кнЗавершить.Enabled = true;
  fi;
  if (ПозицияРеестра <> nil) :
    кнВРеестр.Caption = 'Из реестра';
  else
    кнВРеестр.Caption = 'В реестр';
  fi;
end;

proc ЗаголовкЗаявкиНаЭкран;
  var локСекц : TemplateSection;
    локСекц = СекцияПоИмени("секцЗаголовокЗаявки",фреймСодержание);
    ЗаполнитьЗаголовокЗаявки;
    локСекц.Row[1].Visible = not Завершено;
    локСекц.Row[2].Visible = Завершено;
end;

proc ЗаполнитьЗаголовокЗаявки ;
  ЗаголовокЗаявки = 'Номер заявки '+ НомерБум+ '.';
  if (Завершено) :
    ЗаголовокЗаявки = ЗаголовокЗаявки + ' Заявка завершена';
  fi;
  if (ПозицияРеестра <> nil) :
    ЗаголовокЗаявки = ЗаголовокЗаявки + ', включена в реестр №';
  else
    ЗаголовокЗаявки = ЗаголовокЗаявки + '.';
  fi;
end;




--})

--{{ Вспомогательные методы для работы с иконкой операции

  proc ЗагрузитьИконку (iIco: типИконка; locPath: string);
    ImageLibr[iIco] = Image.Create;
    ImageLibr[iIco].LoadFromFile('%Projects%\ТББ_Базовый\Приложения\Иконки\32\' + locPath);
  end;

 proc ИнициализироватьИконку_Клетки (iIco: типИконка; locSect  : TemplateSection;
                                      locCol : integer; locRow : integer);
   var locCell : TemplateCell;
     locCell = locSect.Cell[locCol,locRow];
     locCell.Image = Image.Create;
     locCell.ImageAlign = Template.AlignRight;
     locCell.ImageWithText = true;
     locCell.Contents = '';
     locCell.Image.Assign(ImageLibr[iIco]);
 end;
--})



func Поле_ПриВыводе_ЗаголовокОкнаФормы (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
  var aTxt: string[];
  with СИС2.СтроковыеФункции  do
    aTxt[1] = MarkInGray(НашеУчреждение.Наим);
    aTxt[2] = 'Заявка на назначение '+ ИмяПособияРод(ТипПособия)+' ';
    --aTxt[3] = MarkInGray('Номер '+ НомерБум);
    aTxt[3] = MarkInGray(Сотрудник.Имя);
    Return МассивСтрокВТекст(aTxt);
  end;
end;


end