class inherited —»—2.ЅазовыйЅланк "¬вод сведений дл€ реестра ЅЋ";


import classes  онстанты,‘ункцииѕрименени€ остант; --,‘ункцииЁлементовƒанных;


inobject public


var »нт—ведени€ : variant;
var »м€ѕол€ : string;
var ѕризнак«авершени€ : logical;


--им€ пол€ - им€ составного пол€, которое будет редактироватьс€ при обращении

inclass public



func —оздатьѕо»нтерфейсу—ведений (лок»нт : ƒанные.инт—ведени€–еестраЅЋ;
                                  лок»м€ѕол€ : string;
                                  локѕризнак«авершени€ : logical) : —лужебные.бл¬вод—ведений–еестраЅЋ;
  Result = —лужебные.бл¬вод—ведений–еестраЅЋ.Create;
  Result.»нт—ведени€ = лок»нт;
  Result.»м€ѕол€ = лок»м€ѕол€;
  Result.ѕризнак«авершени€ = локѕризнак«авершени€;
  лок»нт.«агрузитьѕол€¬Ѕланк¬вода(Result,лок»м€ѕол€);
end;


func ќткрытьѕо»нтерфейсу—ведений (лок»нт : ƒанные.инт—ведени€–еестраЅЋ;
                                  лок»м€ѕол€ : string;
                                  локѕризнак«авершени€ : logical) : integer;
  var locForm: —лужебные.бл¬вод—ведений–еестраЅЋ;
  locForm = —оздатьѕо»нтерфейсу—ведений (лок»нт,лок»м€ѕол€,локѕризнак«авершени€);
  if (CmOk = locForm.ShowEx( , Kernel.Window.ModalWindow)):
    лок»нт.ѕрочитатьѕол€»зЅланка¬вода(locForm,лок»м€ѕол€);
    Return CmOk;
  fi;
end;


inobject private

--фреймы

var фрейм¬вод : TemplateFrame;
var фреймЎаблон : TemplateFrame;

var секц„лен—емьи_–ед : TemplateSection;
var секц„лен—емьи_Ќе–ед : TemplateSection;

--переменные дл€ ввода

var ЌомерЅЋ : string;
var ѕродолжениеЅЋ : string;

var  одѕричины : string;
var  одѕричиныƒоп : string;
var  одѕричины»зм : string;
var ƒата1 : date;

var ‘ио„— : string;
var ¬озрастЋет : integer;
var ¬озрастћес : integer;
var  од–одства : string;
var √руппа»нв_„— : integer;

var  одЌарушени€–ежима : string;
var ƒатаЌарушени€–ежима : date;

--переменные дл€ проверки

var ¬озрастЋет_ƒо–ед : integer;

--------------------------------------------------------------------------------
--{ ќбработчики событий бланка

proc шаблон_ѕри—оздании(Context :Variant);
  var лок√руппы»нв[2] : variant;
  inherited шаблон_ѕри—оздании(Context);
  лок√руппы»нв = √руппы»нвалидности;
  ќбновить—писокѕол€(секц„лен—емьи_–ед.CellByField['√руппа»нв_„—'], лок√руппы»нв);
  ќбновить—писокѕол€(секц„лен—емьи_Ќе–ед.CellByField['√руппа»нв_„—'], лок√руппы»нв);
end;


proc шаблон_ѕриќткрытии(Create :Logical);
  inherited шаблон_ѕриќткрытии(Create);
  if (»м€ѕол€ = '„лен—емьи1_–еестр' or »м€ѕол€ = '„лен—емьи2_–еестр') :
    ¬озрастЋет_ƒо–ед = ¬озрастЋет;
  fi;
  ¬ид‘ормы;
end;


func ѕолеЌомерЅЋ_ѕри¬ходе(Cell :TemplateCell; Index :Integer; Action : Template.EnterTypes) :Logical;
  var лок—трока : string;
  var локќ »Ќ : Ѕюджет_ѕерсонал. лассификаторы.ќ »Ќ;
  Result = false;
  if (Cell.Contents = 'ЌомерЅЋ') :
    лок—трока = ЌомерЅЋ;
    if ( cmOk = Ѕюджет_ѕерсонал.—лужебные.бл¬водЌомераЅЋ.¬ыполнить¬вод(лок—трока)) :
      ЌомерЅЋ = лок—трока;
    fi;
  elsif (Cell.Contents = 'ѕродолжениеЅЋ') :
    лок—трока = ѕродолжениеЅЋ;
    if ( cmOk = Ѕюджет_ѕерсонал.—лужебные.бл¬водЌомераЅЋ.¬ыполнить¬вод(лок—трока)) :
      ѕродолжениеЅЋ = лок—трока;
    fi;
  elsif (Cell.Contents = ' од–одства') :
    if ( cmOk = Ѕюджет_ѕерсонал.Ѕиблио.¬ыборќ »Ќ('011',локќ »Ќ)) :
       од–одства = Substr(локќ »Ќ. одќ »Ќ,3,2);
    fi;
  fi;
end;



--}


--{ ¬спомогательные методы

proc ¬ид‘ормы;
  Template.BeginModify;
    ”далить¬се—екции(фрейм¬вод);
    if (»м€ѕол€ = 'ЌомерЅЋ_–еестр' and ѕризнак«авершени€) :
       лонировать—екцию(фрейм¬вод,'секцЌомерЅЋ_Ќе–ед',фреймЎаблон);
    elsif (»м€ѕол€ = 'ЌомерЅЋ_–еестр' and not ѕризнак«авершени€) :
       лонировать—екцию(фрейм¬вод,'секцЌомерЅЋ_–ед',фреймЎаблон);
    elsif (»м€ѕол€ = 'ѕричина_–еестр' and ѕризнак«авершени€) :
       лонировать—екцию(фрейм¬вод,'секцѕричина_Ќе–ед',фреймЎаблон);
    elsif (»м€ѕол€ = 'ѕричина_–еестр' and not ѕризнак«авершени€) :
       лонировать—екцию(фрейм¬вод,'секцѕричина_–ед',фреймЎаблон);
    elsif ((»м€ѕол€ = '„лен—емьи1_–еестр' or »м€ѕол€ = '„лен—емьи2_–еестр') and ѕризнак«авершени€) :
       лонировать—екцию(фрейм¬вод,'секц„лен—емьи_Ќе–ед',фреймЎаблон);
    elsif ((»м€ѕол€ = '„лен—емьи1_–еестр' or »м€ѕол€ = '„лен—емьи2_–еестр') and not ѕризнак«авершени€) :
       лонировать—екцию(фрейм¬вод,'секц„лен—емьи_–ед',фреймЎаблон);
    elsif (»м€ѕол€ = 'Ќарушение–ежима_–еестр' and ѕризнак«авершени€) :
       лонировать—екцию(фрейм¬вод,'секцЌарушение–ежима_Ќе–ед',фреймЎаблон);
    elsif (»м€ѕол€ = 'Ќарушение–ежима_–еестр' and not ѕризнак«авершени€) :
       лонировать—екцию(фрейм¬вод,'секцЌарушение–ежима_–ед',фреймЎаблон);
    fi;
    фреймЎаблон.Visible = false;
    фреймЎаблон.Printed = false;
    if (ѕризнак«авершени€) :
      кнќк.Enabled = false;
    else
      кнќк.Enabled = true;
    fi;
  Template.EndModify;
end;

func √руппы»нвалидности : variant[2];
  Result = [[0,''],
            [1,'1'],
            [2,'2'],
            [3,'3']
           ];
end;

--}











func ѕоле_ѕри¬ыводе_«аголовокќкна‘ормы (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
  var локЌаше”чреждение: Ѕазовый.ƒанные.—убъект;
  var лок«а€вка : ƒанные.«а€вкаЌаЌазначениеѕособи€;
  var aTxt: string[];
    лок«а€вка = »нт—ведени€.Record.«а€вкаЌаЌазначениеѕособи€;
    локЌаше”чреждение = лок«а€вка.Ќаше”чреждение;
    with —»—2.—троковые‘ункции  do
      aTxt[1] = MarkInGray(локЌаше”чреждение.Ќаим);
      aTxt[2] = 'ƒл€ за€вки є'+ лок«а€вка.ЌомерЅум;
      Return ћассив—трок¬“екст(aTxt);
    end;
end;



end