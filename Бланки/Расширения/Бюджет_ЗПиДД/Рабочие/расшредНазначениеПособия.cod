extends Бюджет_ЗПиДД.Рабочие.редНазначениеПособия "";

import classes Константы,ФункцииПримененияКостант;--,ФункцииДанных;


inobject private

  var кнЗаявкаФСС : Button;

--------------------------------------------------------------------------------
--{ Обработчики событий бланка

proc шаблон_ПриСоздании (Context: Variant);
  extended шаблон_ПриСоздании(Context);
  if (кнЗаявкаФСС = nil):
    кнЗаявкаФСС = СоздатьДопОбъект(Button);
    кнЗаявкаФСС.Caption = 'Заявка в ТО ФСС';
    кнЗаявкаФСС.Hint = 'Печать типовой формы';
  fi;
end;


  proc шаблон_ПриСчитывании;
    extended  шаблон_ПриСчитывании;
    кнЗаявкаФСС.Visible = false;
    if (Интерфейс.СуммаОплатыФсс <> 0) :
      if (ЭтоПрямыеВыплаты(Self.Record.ВидСтраховогоОбеспечения.Код)) :
        кнЗаявкаФСС.Visible = true;
      fi;
    fi;
  end;

proc кнЗаявкаФСС_ПриНажатии (Sender: Button);
  var локЗаявка : Данные.ЗаявкаНаНазначениеПособия;
    EditorPost;
    локЗаявка = Данные.интЗаявкаНаНазначениеПособия.ЗаявкаДляНазначенияПособия(Self.record);
    if (локЗаявка = nil) :
      if (ТипПособияПоКодуСО(Self.Record.ВидСтраховогоОбеспечения.Код) = ТипПособияРанСрок) :
        локЗаявка = МенюДобавленияВЗаявку;
      else
        локЗаявка = ДобавитьНовуюЗаявку;
      fi;
    fi;
    if (локЗаявка <> nil) :
      Данные.интЗаявкаНаНазначениеПособия.БланкРедакторПоУмолчанию.ShowFormEx(локЗаявка);
    fi;
    Close;
end;



--}

--{ Вспомогательные методы
 func МенюДобавленияВЗаявку : Данные.ЗаявкаНаНазначениеПособия;
  var locValuePosition: variant[];
  var p: integer;
  var локЗаявкиДляДобавления[] : Данные.ЗаявкаНаНазначениеПособия;
    Result = nil;
    локЗаявкиДляДобавления = Данные.интЗаявкаНаНазначениеПособия.ЗаявкиДляНазначенияПособияДоп(НашеУчреждение,Сотрудник);
    if (LengthOfArray(локЗаявкиДляДобавления) = 0) :
      Result = ДобавитьНовуюЗаявку;
    else
      locValuePosition[1] = 'Добавить в существующую заявку на пособие по беременности';
      locValuePosition[2] = 'Создать новую заявку';
      p = PopupMenu(locValuePosition);
      if (p = 1) :
        ДобавитьВЗаявку(локЗаявкиДляДобавления);
      elsif (p = 2) :
        Result = ДобавитьНовуюЗаявку;
      fi;
    fi;

 end;

 func ДобавитьНовуюЗаявку : Данные.ЗаявкаНаНазначениеПособия;
   var локПараметры [2] : variant;
   var локНомер : string;
   var локИнт : Данные.интЗаявкаНаНазначениеПособия;
     локПараметры = Данные.интЗаявкаНаНазначениеПособия.ПараметрыНовойЗаявки(Self.Record,nil);
     локИнт = Данные.интЗаявкаНаНазначениеПособия.Create;
     локНомер = ТББ_Базовый.Нумератор.НовыйНомер(локИнт.Record);
     InsertInArray(локПараметры, LengthOfArray(локПараметры) + 1, ['НомерБум', локНомер]);
     InsertInArray(локПараметры, LengthOfArray(локПараметры) + 1, ['Дата', ToDay]);
     локИнт.УстановитьПараметрыНовойЗаписи(локПараметры);
     локИнт.ИнициализироватьПоУмолчанию;
     return локИнт.Record;
 end;

 func ДобавитьВЗаявку(локЗаявкиДляДобавления[] : Данные.ЗаявкаНаНазначениеПособия)  : Данные.ЗаявкаНаНазначениеПособия;
   var локИнт : Данные.интЗаявкаНаНазначениеПособия;
   Result = nil;
   if (Данные.картЗаявкаНаНазначениеПособия.ВыполнитьВыбор(Result, локЗаявкиДляДобавления) = CmOk) :
     локИнт = Данные.интЗаявкаНаНазначениеПособия.ОткрытьПоЗаписи(Result);
     локИнт.ДобавитьНазначениеПособияДоп(Self.Record);
   fi;
 end;


--}
end