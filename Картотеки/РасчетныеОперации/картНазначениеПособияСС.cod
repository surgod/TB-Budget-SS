class inherited Бюджет_ЗПиДД.Рабочие.картНазначениеПособий "Назначение пособий";

import classes Константы,ФункцииПримененияКостант;


-- 2_Конструкторы и визуализаторы0. --

inclass public

  func ВыполнитьВыбор (var локРезультатВыбора: Бюджет_ЗПиДД.РасчетныеОперации.НазначениеПособия;
                     локНашеУчреждение: Базовый.Данные.Субъект;
                     локСотрудник: Базовый.Данные.Субъект;
                     локТипыПособий: integer[]) : integer;
    var locCrd: РасчетныеОперации.картНазначениеПособияСС;
    var locResult: Бюджет_ЗПиДД.РасчетныеОперации.НазначениеПособия;
    var локВидыСО: integer[];
    var aFlt: string[];
    локВидыСО  = ФильтрВидовСОПоТИпамПособий(локТипыПособий);
    aFlt[1] = 'НашеУчреждение=' + Str(локНашеУчреждение);
    aFlt[2] = 'Сотрудник=' + Str(локСотрудник);
    aFlt[3] = 'ВидСтраховогоОбеспечения.DocId in ' + Str(локВидыСО);
    locResult = локРезультатВыбора;
    locCrd = РасчетныеОперации.картНазначениеПособияСС.Create;
    locCrd.CardFile.UserFilter = СИС2.СтроковыеФункции.СложитьСтрокиФильтраПоИ(aFlt);
    if (CmOk = locCrd.ShowEx(locResult, , Kernel.Window.ModalWindow)):
      локРезультатВыбора = locResult;
      Return CmOk;
    fi;
  end;

-- 2_Обработчики событий полей картотеки0. --

inobject private

  func КартПоле_ПриВыводе (Column: CardfileColumn; Rec: Бюджет_ЗПиДД.РасчетныеОперации.НазначениеПособия; Action: Template.OutputTypes; var Format: String): Variant;
    var ii: integer;
    Result = '';
    ii = ТипПособияПоКодуСО (Rec.ВидСтраховогоОбеспечения.Код);
    Result = ИмяТипаПособия(ii);
  end;

-- 2_Вспомогательные методы0. --

  proc ОбновлениеСписковПолейКартотеки;
  end;

  --@doc Ф-я перекрывает СИС2, устанавливает фильтр на кртотеку через контролы шаблона
  func ПолучитьФильтрКартотеки(var locTreeFilter: string = nil): string;
    var aFlt: string[];
    aFlt[1] = inherited ПолучитьФильтрКартотеки(locTreeFilter);
    aFlt[2] = 'ВидСтраховогоОбеспечения.Код in ' + ToStr(ПолучитьКодыВСО);
    Result = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
  end;

  func ПолучитьКодыВСО: string[]; -- Возвращает массив кодов видов страхового обеспечения, имеющих дополнительные настройки
    var QResult: variant[2];
    with Query.Create([Бюджет_СоцСтрах.Настройки.Справочники.ТипПособияДляВидаСО]) do
      QResult = CalcAggregates('GroupBy(Код)') as variant[2];
      Return QResult[1] as string[];
    end;
  end;

end